[
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_direct_format_author_list",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_direct_format_citation",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_many_authors",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_single_author",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_author_list_with_two_authors",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_book",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_conference",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_all_fields",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_minimal_data",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_missing_optional_fields",
  "tests/academic_researcher/citations/test_formatter_edge_cases.py::TestCitationFormatterEdgeCases::test_format_citation_with_special_characters",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_author_list",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_book_citation",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_apa",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_bibtex",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_chicago",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_harvard",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_ieee",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_mla",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_ris",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_citation_vancouver",
  "tests/academic_researcher/citations/test_formatters.py::TestCitationFormatters::test_format_missing_fields",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_bibtex_file_parsing_basics_simple",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_bibtex_file_with_multiple_entries",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_doi_functionality",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_doi_not_found",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_extract_pdf_metadata_direct",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_parse_bibtex_file_nonexistent",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_parse_ris_file_nonexistent",
  "tests/academic_researcher/citations/test_parser_edge_cases.py::TestCitationParserEdgeCases::test_ris_file_parsing_simple",
  "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_extract_doi_from_pdf",
  "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_extract_pdf_metadata",
  "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_bibtex_file",
  "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_invalid_bibtex",
  "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_invalid_ris",
  "tests/academic_researcher/citations/test_parsers.py::TestCitationParsers::test_parse_ris_file",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_backup_and_restore",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_and_get_note",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_citation_and_link_note",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_collaborator_and_annotation",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_experiment",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_grant_proposal_and_add_items",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_create_research_question_and_add_evidence",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_delete_note",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_generate_citation",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_get_related_nodes",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_knowledge_graph_structure",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_search",
  "tests/academic_researcher/core/test_brain.py::TestResearchBrain::test_update_note",
  "tests/academic_researcher/core/test_models.py::TestCitation::test_init_full",
  "tests/academic_researcher/core/test_models.py::TestCitation::test_init_minimal",
  "tests/academic_researcher/core/test_models.py::TestCollaborator::test_init_full",
  "tests/academic_researcher/core/test_models.py::TestCollaborator::test_init_minimal",
  "tests/academic_researcher/core/test_models.py::TestExperiment::test_end_date_validation",
  "tests/academic_researcher/core/test_models.py::TestExperiment::test_init_full",
  "tests/academic_researcher/core/test_models.py::TestExperiment::test_init_minimal",
  "tests/academic_researcher/core/test_models.py::TestGrantProposal::test_init_full",
  "tests/academic_researcher/core/test_models.py::TestGrantProposal::test_init_minimal",
  "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_init_custom_values",
  "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_init_default_values",
  "tests/academic_researcher/core/test_models.py::TestKnowledgeNode::test_update_method",
  "tests/academic_researcher/core/test_models.py::TestNote::test_init_full",
  "tests/academic_researcher/core/test_models.py::TestNote::test_init_minimal",
  "tests/academic_researcher/core/test_models.py::TestResearchQuestion::test_init_minimal",
  "tests/academic_researcher/core/test_models.py::TestResearchQuestion::test_init_with_evidence",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_backup_and_restore",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_delete_item",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_delete_nonexistent_item",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_export_to_dataframe",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_invalid_file",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_nonexistent_attachment",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_get_nonexistent_item",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_init_creates_directories",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_list_all",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_query",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_attachment",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_citation",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_save_and_get_note",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_search_text",
  "tests/academic_researcher/core/test_storage.py::TestLocalStorage::test_update_existing_item",
  "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_apply_template",
  "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_create_default_templates",
  "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_create_template",
  "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_get_template",
  "tests/academic_researcher/experiments/test_template_functions.py::TestTemplatesFunctions::test_list_templates",
  "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_apply_template",
  "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_create_default_templates",
  "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_create_template",
  "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_get_template",
  "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_list_templates",
  "tests/academic_researcher/experiments/test_templates.py::TestExperimentTemplates::test_template_validation",
  "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_convert_uuids_to_strings",
  "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_proposal_markdown",
  "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_proposal_yaml",
  "tests/academic_researcher/grants/test_export.py::TestGrantExport::test_export_unsupported_format",
  "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_markdown_error_handling",
  "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_markdown",
  "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_unknown_extension",
  "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_proposal_yaml",
  "tests/academic_researcher/grants/test_export_functions.py::TestGrantExportFunctions::test_export_yaml_error_handling",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_automatic_citation_extraction",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_cascading_deletion",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_circular_navigation",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_multiple_citation_links",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_navigation_between_linked_items",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_note_citation_linking",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_removing_citation_links",
  "tests/academic_researcher/test_bidirectional_linking.py::TestBidirectionalLinking::test_section_references",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_apa_citation_accuracy",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_bibtex_citation_accuracy",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_bibtex_parser_accuracy",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_chicago_citation_accuracy",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_malformed_citation_handling",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_mla_citation_accuracy",
  "tests/academic_researcher/test_citation_accuracy.py::TestCitationAccuracy::test_ris_parser_accuracy",
  "tests/academic_researcher/test_cli.py::TestCLI::test_init_command",
  "tests/academic_researcher/test_cli.py::TestCLI::test_main_function",
  "tests/academic_researcher/test_cli.py::TestCLI::test_main_with_init_integration",
  "tests/academic_researcher/test_cli.py::TestCLI::test_multiple_cli_commands",
  "tests/academic_researcher/test_cli.py::TestCLI::test_note_command_integration_simplified",
  "tests/academic_researcher/test_cli.py::TestCLI::test_search_command_existence",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_add_annotations",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_annotations_on_citations",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_annotations_on_multiple_documents",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_collaborative_feedback_integration",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_create_collaborator",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations_with_invalid_data",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_collaborator_annotations_with_replies",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_import_invalid_annotations",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_maintaining_annotation_integrity",
  "tests/academic_researcher/test_collaboration.py::TestCollaboration::test_multiple_annotations_from_same_collaborator",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_behavioral_experiment_template",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_computational_modeling_experiment_template",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_custom_template_creation",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_default_templates_availability",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_documentation_with_notes",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_linking_to_research_question",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_experiment_status_updates",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_molecular_biology_experiment_template",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_neuroimaging_experiment_template",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_sleep_study_template",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_template_with_missing_required_fields",
  "tests/academic_researcher/test_experiment_templates.py::TestExperimentTemplates::test_template_with_optional_fields",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_add_items_to_grant_workspace",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_adding_items_incrementally",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_budget_and_timeline_management",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_create_grant_proposal",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_export_grant_proposal_to_markdown",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_export_grant_proposal_to_yaml",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_grant_proposal_status_progression",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_grant_proposal_version_history",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_multi_grant_proposal_organization",
  "tests/academic_researcher/test_grant_proposals.py::TestGrantProposals::test_related_nodes_navigation",
  "tests/academic_researcher/test_main.py::test_main_execution",
  "tests/academic_researcher/test_main.py::test_main_module_imports",
  "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_basic_performance",
  "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_citation_processing",
  "tests/academic_researcher/test_performance_optimized.py::TestOptimizedPerformance::test_note_linking_performance",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_adding_contradicting_evidence",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_adding_supporting_evidence",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_balanced_evidence_evaluation",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_create_research_question",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_evidence_strength_levels",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_evidence_with_multiple_citations",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_identifying_knowledge_gaps",
  "tests/academic_researcher/test_research_questions.py::TestResearchQuestions::test_related_questions",
  "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_collaborative_annotation",
  "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_experiment_documentation",
  "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_grant_proposal_assembly",
  "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_paper_import_to_note_creation",
  "tests/academic_researcher/test_workflows.py::TestUserWorkflows::test_workflow_research_question_analysis",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitive_feature",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_competitor",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_add_market_gap",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_compare_features",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_create_market_gap_from_analysis",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_competitive_matrix",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_generate_feature_parity_report",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitive_features",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_competitors",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_all_market_gaps",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitive_feature",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_competitor",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_get_market_gap",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_identify_gaps",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_initialization",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_performance_with_large_dataset",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_track_competitive_timeline",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_competitor_feature",
  "tests/product_manager/competitive_analysis/test_system.py::TestCompetitiveAnalysisSystem::test_update_feature_implementation",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_add_alternative_to_decision",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_add_decision",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_analyze_alternatives",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_build_decision_graph",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_calculate_decision_stats",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_export_decision",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_generate_decision_template",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_all_decisions",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_get_decision_history",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_initialization",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_link_related_decisions",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_record_outcome_assessment",
  "tests/product_manager/decision_registry/test_registry.py::TestDecisionRegistry::test_search_decisions",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_add_feedback",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_analyze_sentiment",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_dbscan",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_cluster_feedback_kmeans",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_detect_trends",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_extract_themes",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_clusters",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_feedback",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_all_themes",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_cluster",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_cluster",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_feedback_by_theme",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_get_theme",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_initialization",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_performance_with_large_dataset",
  "tests/product_manager/feedback_analysis/test_engine.py::TestFeedbackAnalysisEngine::test_search_feedback",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_add_feature",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_add_strategic_goal",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_analyze_dependencies",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_calculate_strategic_score",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_estimate_roi",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_generate_roadmap",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_features",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_all_strategic_goals",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_feature",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_get_strategic_goal",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_initialization",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_map_strategic_alignment",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_performance_with_large_dataset",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_other_models",
  "tests/product_manager/prioritization/test_framework.py::TestPrioritizationFramework::test_prioritize_features_weighted",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_perspective",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_relationship",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_add_stakeholder",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_perspective_alignment",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_analyze_stakeholder_influence",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_detect_conflicts",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_map",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_generate_stakeholder_matrix",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_perspectives",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_relationships",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_all_stakeholders",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspective",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_perspectives_by_topic",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_relationship",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_perspectives",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_get_stakeholder_relationships",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_identify_consensus",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_initialization",
  "tests/product_manager/stakeholder_insights/test_manager.py::TestStakeholderInsightManager::test_integrate_perspectives"
]