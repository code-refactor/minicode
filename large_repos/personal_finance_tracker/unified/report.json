{"created": 1750048494.3261561, "duration": 1.8274269104003906, "exitcode": 1, "root": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified", "environment": {}, "summary": {"failed": 56, "passed": 97, "total": 153, "collected": 153}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "type": "Function", "lineno": 28}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "type": "Function", "lineno": 36}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "type": "Function", "lineno": 78}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "type": "Function", "lineno": 129}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "type": "Function", "lineno": 163}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "type": "Function", "lineno": 187}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "type": "Function", "lineno": 311}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "type": "Function", "lineno": 370}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "type": "Function", "lineno": 407}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "type": "Function", "lineno": 459}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "type": "Function", "lineno": 512}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "type": "Function", "lineno": 551}]}, {"nodeid": "tests/freelancer/expense/test_categorizer.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer", "type": "Class"}]}, {"nodeid": "tests/freelancer/expense", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense/test_categorizer.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init", "type": "Function", "lineno": 20}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "type": "Function", "lineno": 36}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "type": "Function", "lineno": 54}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "type": "Function", "lineno": 86}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "type": "Function", "lineno": 113}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "type": "Function", "lineno": 144}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "type": "Function", "lineno": 171}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "type": "Function", "lineno": 196}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "type": "Function", "lineno": 223}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "type": "Function", "lineno": 243}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "type": "Function", "lineno": 302}]}, {"nodeid": "tests/freelancer/income/test_income_manager.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager", "type": "Class"}]}, {"nodeid": "tests/freelancer/income", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/income/test_income_manager.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 214}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 24}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 125}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors", "type": "Function", "lineno": 127}]}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "type": "Function", "lineno": 31}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "type": "Function", "lineno": 170}]}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability", "type": "Function", "lineno": 18}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact", "type": "Function", "lineno": 95}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation", "type": "Function", "lineno": 162}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability", "type": "Function", "lineno": 304}]}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "type": "Function", "lineno": 232}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "type": "Function", "lineno": 342}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "type": "Function", "lineno": 463}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "type": "Function", "lineno": 553}]}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 139}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 190}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 285}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 30}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation", "type": "Function", "lineno": 33}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments", "type": "Function", "lineno": 152}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing", "type": "Function", "lineno": 209}]}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "type": "Function", "lineno": 330}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "type": "Function", "lineno": 403}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "type": "Function", "lineno": 494}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "type": "Function", "lineno": 582}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis", "type": "Function", "lineno": 18}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends", "type": "Function", "lineno": 90}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison", "type": "Function", "lineno": 226}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends", "type": "Function", "lineno": 352}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years", "type": "Function", "lineno": 28}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years", "type": "Function", "lineno": 70}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years", "type": "Function", "lineno": 148}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years", "type": "Function", "lineno": 170}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years", "type": "Function", "lineno": 29}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years", "type": "Function", "lineno": 91}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years", "type": "Function", "lineno": 175}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years", "type": "Function", "lineno": 205}]}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified", "type": "Class"}]}, {"nodeid": "tests/freelancer/integration", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/integration/test_categorization_recovery.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py", "type": "Module"}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "type": "Function", "lineno": 25}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "type": "Function", "lineno": 30}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "type": "Function", "lineno": 63}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "type": "Function", "lineno": 100}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "type": "Function", "lineno": 120}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "type": "Function", "lineno": 171}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "type": "Function", "lineno": 191}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "type": "Function", "lineno": 214}]}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler", "type": "Class"}]}, {"nodeid": "tests/freelancer/project", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/project/test_profitability_analyzer.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init", "type": "Function", "lineno": 30}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "type": "Function", "lineno": 35}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "type": "Function", "lineno": 145}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "type": "Function", "lineno": 217}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "type": "Function", "lineno": 236}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "type": "Function", "lineno": 279}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "type": "Function", "lineno": 309}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "type": "Function", "lineno": 332}]}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector", "type": "Class"}]}, {"nodeid": "tests/freelancer/projection", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/projection/test_financial_projector.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "type": "Function", "lineno": 19}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "type": "Function", "lineno": 29}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "type": "Function", "lineno": 60}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "type": "Function", "lineno": 71}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "type": "Function", "lineno": 114}]}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple", "type": "Class"}]}, {"nodeid": "tests/freelancer/tax", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py", "type": "Module"}]}, {"nodeid": "tests/freelancer/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/test_main.py::test_main", "type": "Function", "lineno": 3}]}, {"nodeid": "tests/freelancer", "outcome": "passed", "result": [{"nodeid": "tests/freelancer/expense", "type": "Package"}, {"nodeid": "tests/freelancer/income", "type": "Package"}, {"nodeid": "tests/freelancer/integration", "type": "Package"}, {"nodeid": "tests/freelancer/project", "type": "Package"}, {"nodeid": "tests/freelancer/projection", "type": "Package"}, {"nodeid": "tests/freelancer/tax", "type": "Package"}, {"nodeid": "tests/freelancer/test_main.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria", "type": "Function", "lineno": 15}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey", "type": "Function", "lineno": 153}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria", "type": "Function", "lineno": 263}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria", "type": "Function", "lineno": 16}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener", "type": "Function", "lineno": 40}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing", "type": "Function", "lineno": 46}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions", "type": "Function", "lineno": 133}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions", "type": "Function", "lineno": 178}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch", "type": "Function", "lineno": 222}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria", "type": "Function", "lineno": 258}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria", "type": "Function", "lineno": 300}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria", "type": "Function", "lineno": 342}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments", "type": "Function", "lineno": 384}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics", "type": "Function", "lineno": 20}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine", "type": "Function", "lineno": 35}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact", "type": "Function", "lineno": 48}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact", "type": "Function", "lineno": 130}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact", "type": "Function", "lineno": 205}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation", "type": "Function", "lineno": 244}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric", "type": "Function", "lineno": 285}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark", "type": "Function", "lineno": 307}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data", "type": "Function", "lineno": 332}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds", "type": "Function", "lineno": 369}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis", "type": "Function", "lineno": 17}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar", "type": "Function", "lineno": 75}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis", "type": "Function", "lineno": 164}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis", "type": "Function", "lineno": 18}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance", "type": "Function", "lineno": 89}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance", "type": "Function", "lineno": 188}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system", "type": "Function", "lineno": 21}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition", "type": "Function", "lineno": 33}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening", "type": "Function", "lineno": 96}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification", "type": "Function", "lineno": 175}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints", "type": "Function", "lineno": 239}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio", "type": "Function", "lineno": 306}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme", "type": "Function", "lineno": 402}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints", "type": "Function", "lineno": 417}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit", "type": "Function", "lineno": 436}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio", "type": "Function", "lineno": 480}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker", "type": "Function", "lineno": 19}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions", "type": "Function", "lineno": 41}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions", "type": "Function", "lineno": 84}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns", "type": "Function", "lineno": 123}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions", "type": "Function", "lineno": 162}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations", "type": "Function", "lineno": 200}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities", "type": "Function", "lineno": 268}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment", "type": "Function", "lineno": 331}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions", "type": "Function", "lineno": 381}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends", "type": "Function", "lineno": 423}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories", "type": "Function", "lineno": 21}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system", "type": "Function", "lineno": 42}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags", "type": "Function", "lineno": 56}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags", "type": "Function", "lineno": 99}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions", "type": "Function", "lineno": 132}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns", "type": "Function", "lineno": 163}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter", "type": "Function", "lineno": 209}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors", "type": "Function", "lineno": 248}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction", "type": "Function", "lineno": 280}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment", "type": "Function", "lineno": 309}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions", "type": "Function", "lineno": 336}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values", "type": "Function", "lineno": 382}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories", "type": "Function", "lineno": 20}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time", "type": "Function", "lineno": 74}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis", "type": "Function", "lineno": 163}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment", "type": "Class"}]}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py", "type": "Module"}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py", "type": "Module"}]}, {"nodeid": "tests/socially_responsible_investor", "outcome": "passed", "result": [{"nodeid": "tests/socially_responsible_investor/test_ethical_screening", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting", "type": "Package"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/freelancer", "type": "Package"}, {"nodeid": "tests/socially_responsible_investor", "type": "Package"}]}], "tests": [{"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init", "lineno": 28, "outcome": "failed", "keywords": ["test_init", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0005890112370252609, "outcome": "passed"}, "call": {"duration": 0.0018495251424610615, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 32, "message": "AssertionError: assert [Categorizati...ue=None), ...] == []\n  \n  Left contains 8 more items, first extra item: CategorizationRule(rule_id='6568779b-c78d-438d-be2c-0573c92eb6b5', category='software', rule_type=<RuleType.DESCRIPTIO...ASE), amount_min=None, amount_max=None, amount_value=None, required_tags=[], custom_function=None, category_value=None)\n  Use -v to get more diff"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 32, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc860239f60>\n\n    def test_init(self):\n        \"\"\"Test initialization of the expense categorizer.\"\"\"\n        categorizer = ExpenseCategorizer()\n>       assert categorizer.rules == []\nE       AssertionError: assert [Categorizati...ue=None), ...] == []\nE         \nE         Left contains 8 more items, first extra item: CategorizationRule(rule_id='6568779b-c78d-438d-be2c-0573c92eb6b5', category='software', rule_type=<RuleType.DESCRIPTIO...ASE), amount_min=None, amount_max=None, amount_value=None, required_tags=[], custom_function=None, category_value=None)\nE         Use -v to get more diff\n\ntests/freelancer/expense/test_categorizer.py:32: AssertionError"}, "teardown": {"duration": 0.0001609567552804947, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule", "lineno": 36, "outcome": "failed", "keywords": ["test_add_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013272278010845184, "outcome": "passed"}, "call": {"duration": 0.00034800823777914047, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 51, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 51, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023a770>\n\n    def test_add_categorization_rule(self):\n        \"\"\"Test adding a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a rule\n        rule = CategorizationRule(\n            name=\"Office Supplies Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"office\", \"supplies\", \"paper\", \"ink\", \"toner\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        # Add the rule\n>       added_rule = categorizer.add_categorization_rule(rule)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:51: AttributeError"}, "teardown": {"duration": 0.0001506740227341652, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule", "lineno": 78, "outcome": "failed", "keywords": ["test_update_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001194109208881855, "outcome": "passed"}, "call": {"duration": 0.0002966253086924553, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 92, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 92, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc860239bd0>\n\n    def test_update_categorization_rule(self):\n        \"\"\"Test updating a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create and add a rule\n        rule = CategorizationRule(\n            name=\"Original Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"original\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n>       categorizer.add_categorization_rule(rule)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:92: AttributeError"}, "teardown": {"duration": 0.00015044212341308594, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule", "lineno": 129, "outcome": "failed", "keywords": ["test_remove_categorization_rule", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001220996491611004, "outcome": "passed"}, "call": {"duration": 0.00032037217170000076, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 149, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 149, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023a920>\n\n    def test_remove_categorization_rule(self):\n        \"\"\"Test removing a categorization rule.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create and add rules\n        rule1 = CategorizationRule(\n            name=\"Rule 1\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"rule1\"],\n            business_use_percentage=100.0,\n        )\n    \n        rule2 = CategorizationRule(\n            name=\"Rule 2\",\n            category=ExpenseCategory.SOFTWARE,\n            keyword_patterns=[\"rule2\"],\n            business_use_percentage=100.0,\n        )\n    \n>       categorizer.add_categorization_rule(rule1)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:149: AttributeError"}, "teardown": {"duration": 0.00015090126544237137, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item", "lineno": 163, "outcome": "failed", "keywords": ["test_add_mixed_use_item", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011988403275609016, "outcome": "passed"}, "call": {"duration": 0.00031087780371308327, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 177, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_mixed_use_item'. Did you mean: '_add_mixed_use_item'?"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 177, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023a950>\n\n    def test_add_mixed_use_item(self):\n        \"\"\"Test adding a mixed-use item.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a mixed-use item\n        item = MixedUseItem(\n            name=\"Home Internet\",\n            category=ExpenseCategory.INTERNET,\n            business_use_percentage=70.0,\n            description=\"Internet used for both business and personal\",\n        )\n    \n        # Add the item\n>       added_item = categorizer.add_mixed_use_item(item)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_mixed_use_item'. Did you mean: '_add_mixed_use_item'?\n\ntests/freelancer/expense/test_categorizer.py:177: AttributeError"}, "teardown": {"duration": 0.00014766305685043335, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction", "lineno": 187, "outcome": "failed", "keywords": ["test_categorize_transaction", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.001720429863780737, "outcome": "passed"}, "call": {"duration": 0.0003290870226919651, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 218, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 218, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023aa10>\nsample_transactions = [BaseTransaction(id='1f9862b2-69b1-427d-8910-e6c0a2614ea6', date=2022-01-15 00:00:00, amount=2500, description='Client...7e-eb258c9c1560', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_categorize_transaction(self, sample_transactions):\n        \"\"\"Test categorizing a transaction.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add some rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Meal Rule\",\n                category=ExpenseCategory.MEALS,\n                keyword_patterns=[\"meal\", \"restaurant\", \"food\"],\n                business_use_percentage=50.0,  # 50% business use\n                priority=3,\n            ),\n        ]\n    \n        for rule in rules:\n>           categorizer.add_categorization_rule(rule)\nE           AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:218: AttributeError"}, "teardown": {"duration": 0.000204350333660841, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions", "lineno": 311, "outcome": "failed", "keywords": ["test_categorize_transactions", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001185201108455658, "outcome": "passed"}, "call": {"duration": 0.0003062998875975609, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 324, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 324, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023ad70>\n\n    def test_categorize_transactions(self):\n        \"\"\"Test categorizing multiple transactions at once.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rule = CategorizationRule(\n            name=\"Office Supplies Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"office\", \"supplies\"],\n            business_use_percentage=100.0,\n        )\n    \n>       categorizer.add_categorization_rule(rule)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:324: AttributeError"}, "teardown": {"duration": 0.00014886585995554924, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization", "lineno": 370, "outcome": "failed", "keywords": ["test_apply_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011922186240553856, "outcome": "passed"}, "call": {"duration": 0.0003526671789586544, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 397, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'apply_categorization'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 397, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023aef0>\n\n    def test_apply_categorization(self):\n        \"\"\"Test applying a categorization result to a transaction.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a transaction\n        transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 7, 1),\n            amount=100.0,\n            description=\"Test transaction\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Create a categorization result\n    \n        result = CategorizationResult(\n            transaction_id=transaction.id,\n            original_transaction=transaction,\n            assigned_category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=80.0,\n            confidence_score=0.9,\n            is_mixed_use=True,\n        )\n    \n        # Apply the categorization\n>       updated_transaction = categorizer.apply_categorization(transaction, result)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'apply_categorization'\n\ntests/freelancer/expense/test_categorizer.py:397: AttributeError"}, "teardown": {"duration": 0.00014855433255434036, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary", "lineno": 407, "outcome": "failed", "keywords": ["test_generate_expense_summary", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016787140630185604, "outcome": "passed"}, "call": {"duration": 0.00031242193654179573, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 429, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 429, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023b0a0>\nsample_transactions = [BaseTransaction(id='de40c8b8-01cf-410c-bb7b-cb2948e2559c', date=2022-01-15 00:00:00, amount=2500, description='Client...9c-41ef5641a34f', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_generate_expense_summary(self, sample_transactions):\n        \"\"\"Test generating an expense summary.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules for test categories\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\"],\n                business_use_percentage=100.0,\n            ),\n            CategorizationRule(\n                name=\"Internet Rule\",\n                category=ExpenseCategory.INTERNET,\n                keyword_patterns=[\"internet\"],\n                business_use_percentage=80.0,\n            ),\n        ]\n    \n        for rule in rules:\n>           categorizer.add_categorization_rule(rule)\nE           AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:429: AttributeError"}, "teardown": {"duration": 0.00020331982523202896, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail", "lineno": 459, "outcome": "failed", "keywords": ["test_get_audit_trail", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012047635391354561, "outcome": "passed"}, "call": {"duration": 0.00033606961369514465, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 485, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'apply_categorization'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 485, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023b220>\n\n    def test_get_audit_trail(self):\n        \"\"\"Test retrieving the audit trail.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a transaction\n        transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 8, 1),\n            amount=100.0,\n            description=\"Test transaction\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Create a categorization result\n    \n        result = CategorizationResult(\n            transaction_id=transaction.id,\n            original_transaction=transaction,\n            assigned_category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=100.0,\n            confidence_score=0.9,\n        )\n    \n        # Perform multiple actions to generate audit records\n>       categorizer.apply_categorization(transaction, result)\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'apply_categorization'\n\ntests/freelancer/expense/test_categorizer.py:485: AttributeError"}, "teardown": {"duration": 0.00014923280104994774, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization", "lineno": 512, "outcome": "failed", "keywords": ["test_correct_categorization", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012031709775328636, "outcome": "passed"}, "call": {"duration": 0.000309579074382782, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 530, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'correct_categorization'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 530, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023b3a0>\n\n    def test_correct_categorization(self):\n        \"\"\"Test correcting the categorization of a transaction.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create a transaction with initial categorization\n        transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 9, 1),\n            amount=200.0,\n            description=\"Initially miscategorized expense\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        )\n    \n        # Correct the categorization\n>       updated_transaction = categorizer.correct_categorization(\n            transaction,\n            new_category=ExpenseCategory.MARKETING,\n            new_business_percentage=100.0,\n        )\nE       AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'correct_categorization'\n\ntests/freelancer/expense/test_categorizer.py:530: AttributeError"}, "teardown": {"duration": 0.00014766724780201912, "outcome": "passed"}}, {"nodeid": "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching", "lineno": 551, "outcome": "failed", "keywords": ["test_rule_matching", "TestExpenseCategorizer", "test_categorizer.py", "expense", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011858996003866196, "outcome": "passed"}, "call": {"duration": 0.0003259871155023575, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/expense/test_categorizer.py", "lineno": 596, "message": "AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'"}, "traceback": [{"path": "tests/freelancer/expense/test_categorizer.py", "lineno": 596, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.expense.test_categorizer.TestExpenseCategorizer object at 0x7fc86023b520>\n\n    def test_rule_matching(self):\n        \"\"\"Test rule matching logic in more detail.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create rules with different conditions\n        rules = [\n            # Rule with keyword patterns only\n            CategorizationRule(\n                name=\"Keyword Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            # Rule with merchant patterns only\n            CategorizationRule(\n                name=\"Merchant Rule\",\n                category=ExpenseCategory.MEALS,\n                merchant_patterns=[\"restaurant\", \"cafe\"],\n                business_use_percentage=50.0,\n                priority=8,\n            ),\n            # Rule with amount range only\n            CategorizationRule(\n                name=\"Amount Rule\",\n                category=ExpenseCategory.EQUIPMENT,\n                amount_min=500.0,\n                amount_max=2000.0,\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            # Rule with multiple conditions\n            CategorizationRule(\n                name=\"Complex Rule\",\n                category=ExpenseCategory.MARKETING,\n                keyword_patterns=[\"marketing\", \"advertising\"],\n                merchant_patterns=[\"facebook\", \"google\"],\n                amount_max=300.0,\n                business_use_percentage=100.0,\n                priority=15,\n            ),\n        ]\n    \n        for rule in rules:\n>           categorizer.add_categorization_rule(rule)\nE           AttributeError: 'FreelancerExpenseCategorizer' object has no attribute 'add_categorization_rule'\n\ntests/freelancer/expense/test_categorizer.py:596: AttributeError"}, "teardown": {"duration": 0.00015617813915014267, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init", "lineno": 20, "outcome": "failed", "keywords": ["test_init", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00032153818756341934, "outcome": "passed"}, "call": {"duration": 0.0001946510747075081, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 24, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc86023a0e0>\n\n    def test_init(self):\n        \"\"\"Test initialization with default and custom config.\"\"\"\n        # Default initialization\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00015712901949882507, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income", "lineno": 36, "outcome": "failed", "keywords": ["test_calculate_monthly_income", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016865408979356289, "outcome": "passed"}, "call": {"duration": 0.00018650200217962265, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 39, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc860239750>\nsample_transactions = [BaseTransaction(id='31a3c5f0-2efd-401e-8482-f011af855a75', date=2022-01-15 00:00:00, amount=2500, description='Client...b7-9fc78483675a', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_calculate_monthly_income(self, sample_transactions):\n        \"\"\"Test calculation of monthly income from transactions.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.0002271849662065506, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average", "lineno": 54, "outcome": "failed", "keywords": ["test_smooth_income_moving_average", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0017162342555820942, "outcome": "passed"}, "call": {"duration": 0.00019312696531414986, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 57, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc86023a830>\nsample_transactions = [BaseTransaction(id='208fa73d-1403-4323-aa14-c7ce98d52029', date=2022-01-15 00:00:00, amount=2500, description='Client...30-d9693525a8de', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_smooth_income_moving_average(self, sample_transactions):\n        \"\"\"Test income smoothing with moving average method.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00020841369405388832, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing", "lineno": 86, "outcome": "failed", "keywords": ["test_smooth_income_exponential_smoothing", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016816416755318642, "outcome": "passed"}, "call": {"duration": 0.0001867818646132946, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 89, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc86023b880>\nsample_transactions = [BaseTransaction(id='2fa0e79a-032c-4ea8-b83a-bf7f3dc7c5e8', date=2022-01-15 00:00:00, amount=2500, description='Client...49-1db80559201a', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_smooth_income_exponential_smoothing(self, sample_transactions):\n        \"\"\"Test income smoothing with exponential smoothing method.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00021930690854787827, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based", "lineno": 113, "outcome": "failed", "keywords": ["test_smooth_income_percentile_based", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.001677549909800291, "outcome": "passed"}, "call": {"duration": 0.00018352968618273735, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 116, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc86023ba90>\nsample_transactions = [BaseTransaction(id='cc9780ec-3816-414b-90ef-eaae4bfb9f2d', date=2022-01-15 00:00:00, amount=2500, description='Client...fe-632221f94f01', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_smooth_income_percentile_based(self, sample_transactions):\n        \"\"\"Test income smoothing with percentile-based method.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00021597370505332947, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment", "lineno": 144, "outcome": "failed", "keywords": ["test_smooth_income_seasonal_adjustment", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016649551689624786, "outcome": "passed"}, "call": {"duration": 0.00018831714987754822, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 147, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc86023bca0>\nsample_transactions = [BaseTransaction(id='77203dd8-64cb-438f-b272-d443d9518dc5', date=2022-01-15 00:00:00, amount=2500, description='Client...1d-7c16c7ee69ec', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_smooth_income_seasonal_adjustment(self, sample_transactions):\n        \"\"\"Test income smoothing with seasonal adjustment method.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:147: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00020615989342331886, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median", "lineno": 171, "outcome": "failed", "keywords": ["test_smooth_income_rolling_median", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016232039779424667, "outcome": "passed"}, "call": {"duration": 0.00019244197756052017, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 174, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc86023beb0>\nsample_transactions = [BaseTransaction(id='62f46f59-b045-495c-92a6-490bcc776c17', date=2022-01-15 00:00:00, amount=2500, description='Client...0d-8625f752b413', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_smooth_income_rolling_median(self, sample_transactions):\n        \"\"\"Test income smoothing with rolling median method.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.0002110721543431282, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target", "lineno": 196, "outcome": "failed", "keywords": ["test_smooth_income_with_target", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0016407221555709839, "outcome": "passed"}, "call": {"duration": 0.00018229475244879723, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 199, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc860090100>\nsample_transactions = [BaseTransaction(id='220a999f-eb37-474f-9ce4-d5abf3afd61a', date=2022-01-15 00:00:00, amount=2500, description='Client...2f-d398d212cf27', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\n\n    def test_smooth_income_with_target(self, sample_transactions):\n        \"\"\"Test income smoothing with target monthly income override.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:199: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00022280728444457054, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue", "lineno": 223, "outcome": "failed", "keywords": ["test_forecast_revenue", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0018810341134667397, "outcome": "passed"}, "call": {"duration": 0.00019521871581673622, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 226, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc860090340>\nsample_transactions = [BaseTransaction(id='3bcfdb10-5589-4833-a545-fad233f82400', date=2022-01-15 00:00:00, amount=2500, description='Client...e3-a8b482e7b31c', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\nsample_invoices = [Invoice(id='invproject1-1', client_id='client1', project_id='project1', issue_date=datetime.datetime(2022, 1, 23, 12,...keting Campaign', line_items=[{'description': 'Payment for 50.0 hours on Marketing Campaign', 'amount': 3750.0}]), ...]\n\n    def test_forecast_revenue(self, sample_transactions, sample_invoices):\n        \"\"\"Test revenue forecasting based on history and pending invoices.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:226: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.0002604150213301182, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income", "lineno": 243, "outcome": "failed", "keywords": ["test_extremely_irregular_income", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012524891644716263, "outcome": "passed"}, "call": {"duration": 0.00017432915046811104, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 246, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc8600904f0>\n\n    def test_extremely_irregular_income(self):\n        \"\"\"Test handling of extremely irregular income patterns.\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:246: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00015643611550331116, "outcome": "passed"}}, {"nodeid": "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset", "lineno": 302, "outcome": "failed", "keywords": ["test_income_smoothing_with_large_dataset", "TestIncomeManager", "test_income_manager.py", "income", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001247772015631199, "outcome": "passed"}, "call": {"duration": 0.00017338991165161133, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError: 'SmoothingConfig' object has no attribute 'window_months'"}, "traceback": [{"path": "tests/freelancer/income/test_income_manager.py", "lineno": 305, "message": ""}, {"path": "personal_finance_tracker/income/income_manager_migrated.py", "lineno": 54, "message": "in __init__"}, {"path": "../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py", "lineno": 989, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.income.test_income_manager.TestIncomeManager object at 0x7fc860090670>\n\n    def test_income_smoothing_with_large_dataset(self):\n        \"\"\"Test performance with a large dataset (5+ years).\"\"\"\n>       manager = IncomeManager()\n\ntests/freelancer/income/test_income_manager.py:305: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/income/income_manager_migrated.py:54: in __init__\n    'window_months': self.config.window_months,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = SmoothingConfig(method=<SmoothingMethod.MOVING_AVERAGE: 'moving_average'>, window_size=3, alpha=0.3, seasonal_periods=...ercentile=25.0, min_history_months=3, target_monthly_income=None, emergency_buffer_months=2.0, confidence_interval=0.8)\nitem = 'window_months'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'SmoothingConfig' object has no attribute 'window_months'\n\n../../../../.pyenv/versions/3.10.11/lib/python3.10/site-packages/pydantic/main.py:989: AttributeError"}, "teardown": {"duration": 0.00017230072990059853, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003184960223734379, "outcome": "passed"}, "call": {"duration": 0.0004308680072426796, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery.py", "lineno": 94, "message": "AssertionError: assert None == <ExpenseCategory.BUSINESS_SUPPLIES: 'business_supplies'>\n +  where None = BaseTransaction(id='5e43d808-823e-459e-9c1a-3bef7f507aad', date=2022-01-15 00:00:00, amount=1200.0, description='Equipment purchase', type=expense).category\n +  and   <ExpenseCategory.BUSINESS_SUPPLIES: 'business_supplies'> = ExpenseCategory.BUSINESS_SUPPLIES"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery.py", "lineno": 94, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery.TestCategorizationRecovery object at 0x7fc860092050>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        categorizer.add_categorization_rule(business_rule)\n    \n        # Create transactions for Q1 2022\n        transactions = []\n    \n        # Transaction that should be business but will be miscategorized as personal\n        miscategorized_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 15),\n            amount=1200.0,\n            description=\"Equipment purchase\",  # Contains \"equipment\" keyword, will be categorized as business\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Correctly categorized transaction\n        correct_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 20),\n            amount=500.0,\n            description=\"Business supplies purchase\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Income transaction\n        income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 10),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        transactions.extend([miscategorized_transaction, correct_transaction, income_transaction])\n    \n        # Apply initial categorization\n        categorization_results = categorizer.categorize_transactions(transactions)\n    \n        categorized_transactions = []\n        for transaction in transactions:\n            if transaction.transaction_type == TransactionType.EXPENSE:\n                # Find matching result\n                for result in categorization_results:\n                    if result.transaction_id == transaction.id:\n                        transaction = categorizer.apply_categorization(transaction, result)\n                        break\n            categorized_transactions.append(transaction)\n    \n        # Verify the transaction is categorized due to matching the 'equipment' keyword\n        # The categorizer recognizes 'Equipment' from our business rule and assigns BUSINESS_SUPPLIES\n        categorized_tx = next(t for t in categorized_transactions\n                            if t.id == miscategorized_transaction.id)\n>       assert categorized_tx.category == ExpenseCategory.BUSINESS_SUPPLIES\nE       AssertionError: assert None == <ExpenseCategory.BUSINESS_SUPPLIES: 'business_supplies'>\nE        +  where None = BaseTransaction(id='5e43d808-823e-459e-9c1a-3bef7f507aad', date=2022-01-15 00:00:00, amount=1200.0, description='Equipment purchase', type=expense).category\nE        +  and   <ExpenseCategory.BUSINESS_SUPPLIES: 'business_supplies'> = ExpenseCategory.BUSINESS_SUPPLIES\n\ntests/freelancer/integration/test_categorization_recovery.py:94: AssertionError"}, "teardown": {"duration": 0.0001500612124800682, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors", "lineno": 214, "outcome": "passed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecovery", "test_categorization_recovery.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012293504551053047, "outcome": "passed"}, "call": {"duration": 0.0004397598095238209, "outcome": "passed"}, "teardown": {"duration": 0.00012863194569945335, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors", "lineno": 24, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecoveryMocks", "test_categorization_recovery_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012256624177098274, "outcome": "passed"}, "call": {"duration": 0.0004010377451777458, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 56, "message": "AssertionError: assert UUID('1215e106-2fae-42c1-964d-923c07b3636f') == '1215e106-2fae-42c1-964d-923c07b3636f'\n +  where UUID('1215e106-2fae-42c1-964d-923c07b3636f') = CategorizationResult(transaction_id=UUID('1215e106-2fae-42c1-964d-923c07b3636f'), original_transaction=BaseTransaction...dence_score=0.0, is_mixed_use=False, categorization_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 725036), notes=None).transaction_id\n +  and   '1215e106-2fae-42c1-964d-923c07b3636f' = BaseTransaction(id='1215e106-2fae-42c1-964d-923c07b3636f', date=2022-01-15 00:00:00, amount=1200.0, description='Equipment purchase', type=expense).id"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 56, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_mocks.TestCategorizationRecoveryMocks object at 0x7fc8600927d0>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        categorizer.add_categorization_rule(business_rule)\n    \n        # Create a transaction\n        equipment_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 15),\n            amount=1200.0,\n            description=\"Equipment purchase\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Apply categorization\n        results = categorizer.categorize_transactions([equipment_tx])\n    \n        # Verify transaction matches rule based on \"equipment\" keyword\n        assert len(results) == 1\n>       assert results[0].transaction_id == equipment_tx.id\nE       AssertionError: assert UUID('1215e106-2fae-42c1-964d-923c07b3636f') == '1215e106-2fae-42c1-964d-923c07b3636f'\nE        +  where UUID('1215e106-2fae-42c1-964d-923c07b3636f') = CategorizationResult(transaction_id=UUID('1215e106-2fae-42c1-964d-923c07b3636f'), original_transaction=BaseTransaction...dence_score=0.0, is_mixed_use=False, categorization_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 725036), notes=None).transaction_id\nE        +  and   '1215e106-2fae-42c1-964d-923c07b3636f' = BaseTransaction(id='1215e106-2fae-42c1-964d-923c07b3636f', date=2022-01-15 00:00:00, amount=1200.0, description='Equipment purchase', type=expense).id\n\ntests/freelancer/integration/test_categorization_recovery_mocks.py:56: AssertionError"}, "teardown": {"duration": 0.00014712288975715637, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors", "lineno": 125, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecoveryMocks", "test_categorization_recovery_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012161489576101303, "outcome": "passed"}, "call": {"duration": 0.00028270017355680466, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 203, "message": "IndexError: list index out of range"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_mocks.py", "lineno": 203, "message": "IndexError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_mocks.TestCategorizationRecoveryMocks object at 0x7fc860092950>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test correcting multiple categorization errors at once.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"office\", \"supplies\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n        ]\n    \n        for rule in rules:\n            categorizer.add_categorization_rule(rule)\n    \n        # Create several transactions that should be business expenses\n        transactions = [\n            # Software expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 10),\n                amount=500.0,\n                description=\"Software subscription renewal\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            # Office supplies\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 15),\n                amount=300.0,\n                description=\"Office supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            # Phone expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 20),\n                amount=100.0,\n                description=\"Mobile phone bill\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        # Categorize transactions\n        results = categorizer.categorize_transactions(transactions)\n    \n        # Apply categorizations\n        categorized_txs = []\n        for tx in transactions:\n            for result in results:\n                if result.transaction_id == tx.id:\n                    categorized_tx = categorizer.apply_categorization(tx, result)\n                    categorized_txs.append(categorized_tx)\n                    break\n    \n        # Verify all transactions were categorized correctly\n>       assert categorized_txs[0].category == ExpenseCategory.SOFTWARE\nE       IndexError: list index out of range\n\ntests/freelancer/integration/test_categorization_recovery_mocks.py:203: IndexError"}, "teardown": {"duration": 0.0001500006765127182, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors", "lineno": 25, "outcome": "failed", "keywords": ["test_recover_from_delayed_categorization_errors", "TestCategorizationRecoverySimplified", "test_categorization_recovery_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001306138001382351, "outcome": "passed"}, "call": {"duration": 0.0003870530053973198, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 57, "message": "AssertionError: assert UUID('dede28fc-2d45-4d4f-9b9c-bb0e2e79701e') == 'dede28fc-2d45-4d4f-9b9c-bb0e2e79701e'\n +  where UUID('dede28fc-2d45-4d4f-9b9c-bb0e2e79701e') = CategorizationResult(transaction_id=UUID('dede28fc-2d45-4d4f-9b9c-bb0e2e79701e'), original_transaction=BaseTransaction...dence_score=0.0, is_mixed_use=False, categorization_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 734904), notes=None).transaction_id\n +  and   'dede28fc-2d45-4d4f-9b9c-bb0e2e79701e' = BaseTransaction(id='dede28fc-2d45-4d4f-9b9c-bb0e2e79701e', date=2022-01-15 00:00:00, amount=1200.0, description='Equipment purchase', type=expense).id"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 57, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_simplified.TestCategorizationRecoverySimplified object at 0x7fc860092f50>\n\n    def test_recover_from_delayed_categorization_errors(self):\n        \"\"\"Test finding and correcting categorization errors months later.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        categorizer.add_categorization_rule(business_rule)\n    \n        # Create a transaction\n        equipment_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 1, 15),\n            amount=1200.0,\n            description=\"Equipment purchase\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Apply categorization\n        results = categorizer.categorize_transactions([equipment_tx])\n    \n        # Verify transaction matches rule based on \"equipment\" keyword\n        assert len(results) == 1\n>       assert results[0].transaction_id == equipment_tx.id\nE       AssertionError: assert UUID('dede28fc-2d45-4d4f-9b9c-bb0e2e79701e') == 'dede28fc-2d45-4d4f-9b9c-bb0e2e79701e'\nE        +  where UUID('dede28fc-2d45-4d4f-9b9c-bb0e2e79701e') = CategorizationResult(transaction_id=UUID('dede28fc-2d45-4d4f-9b9c-bb0e2e79701e'), original_transaction=BaseTransaction...dence_score=0.0, is_mixed_use=False, categorization_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 734904), notes=None).transaction_id\nE        +  and   'dede28fc-2d45-4d4f-9b9c-bb0e2e79701e' = BaseTransaction(id='dede28fc-2d45-4d4f-9b9c-bb0e2e79701e', date=2022-01-15 00:00:00, amount=1200.0, description='Equipment purchase', type=expense).id\n\ntests/freelancer/integration/test_categorization_recovery_simplified.py:57: AssertionError"}, "teardown": {"duration": 0.0001498144119977951, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors", "lineno": 127, "outcome": "failed", "keywords": ["test_recover_from_multiple_categorization_errors", "TestCategorizationRecoverySimplified", "test_categorization_recovery_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012062303721904755, "outcome": "passed"}, "call": {"duration": 0.00027514901012182236, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 205, "message": "IndexError: list index out of range"}, "traceback": [{"path": "tests/freelancer/integration/test_categorization_recovery_simplified.py", "lineno": 205, "message": "IndexError"}], "longrepr": "self = <tests.freelancer.integration.test_categorization_recovery_simplified.TestCategorizationRecoverySimplified object at 0x7fc8600930d0>\n\n    def test_recover_from_multiple_categorization_errors(self):\n        \"\"\"Test correcting multiple categorization errors at once.\"\"\"\n        # Create expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"office\", \"supplies\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n            CategorizationRule(\n                name=\"Phone Rule\",\n                category=ExpenseCategory.PHONE,\n                keyword_patterns=[\"phone\", \"mobile\"],\n                business_use_percentage=80.0,\n                priority=8,\n            ),\n        ]\n    \n        for rule in rules:\n            categorizer.add_categorization_rule(rule)\n    \n        # Create several transactions that should be business expenses\n        transactions = [\n            # Software expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 10),\n                amount=500.0,\n                description=\"Software subscription renewal\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            # Office supplies\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 15),\n                amount=300.0,\n                description=\"Office supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            # Phone expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 20),\n                amount=100.0,\n                description=\"Mobile phone bill\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        # Categorize transactions\n        results = categorizer.categorize_transactions(transactions)\n    \n        # Apply categorizations\n        categorized_txs = []\n        for tx in transactions:\n            for result in results:\n                if result.transaction_id == tx.id:\n                    categorized_tx = categorizer.apply_categorization(tx, result)\n                    categorized_txs.append(categorized_tx)\n                    break\n    \n        # Verify all transactions were categorized correctly\n>       assert categorized_txs[0].category == ExpenseCategory.SOFTWARE\nE       IndexError: list index out of range\n\ntests/freelancer/integration/test_categorization_recovery_simplified.py:205: IndexError"}, "teardown": {"duration": 0.00015620887279510498, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability", "lineno": 31, "outcome": "failed", "keywords": ["test_business_expenses_impact_on_tax_liability", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012878095731139183, "outcome": "passed"}, "call": {"duration": 0.0003963247872889042, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_expense_tax_integration.py", "lineno": 156, "message": "assert 0.0 < 0.0"}, "traceback": [{"path": "tests/freelancer/integration/test_expense_tax_integration.py", "lineno": 156, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_expense_tax_integration.TestExpenseTaxIntegration object at 0x7fc860093580>\n\n    def test_business_expenses_impact_on_tax_liability(self):\n        \"\"\"Test how business expense categorization impacts tax liability.\"\"\"\n        # Set up the expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Add categorization rules\n        business_rule = CategorizationRule(\n            name=\"Business Expense Rule\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            keyword_patterns=[\"business\", \"supplies\", \"equipment\"],\n            business_use_percentage=100.0,\n            priority=10,\n        )\n    \n        mixed_use_rule = CategorizationRule(\n            name=\"Mixed Use Rule\",\n            category=ExpenseCategory.INTERNET,\n            keyword_patterns=[\"internet\", \"phone\"],\n            business_use_percentage=80.0,\n            priority=5,\n        )\n    \n        personal_rule = CategorizationRule(\n            name=\"Personal Expense Rule\",\n            category=ExpenseCategory.PERSONAL,\n            keyword_patterns=[\"personal\", \"groceries\"],\n            business_use_percentage=0.0,\n            priority=3,\n        )\n    \n        categorizer.add_categorization_rule(business_rule)\n        categorizer.add_categorization_rule(mixed_use_rule)\n        categorizer.add_categorization_rule(personal_rule)\n    \n        # Set up the tax manager\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Create test transactions\n        transactions = [\n            # Business transaction - 100% deductible\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 15),\n                amount=1000.0,\n                description=\"Business supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n    \n            # Mixed-use transaction - partially deductible\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 20),\n                amount=200.0,\n                description=\"Internet bill payment\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n    \n            # Personal transaction - not deductible\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 25),\n                amount=500.0,\n                description=\"Personal groceries\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n    \n            # Income transaction\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 3, 10),\n                amount=5000.0,\n                description=\"Client payment\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        # Categorize the expenses\n        categorization_results = categorizer.categorize_transactions(transactions)\n    \n        # Apply categorizations\n        categorized_transactions = []\n        for i, transaction in enumerate(transactions):\n            if transaction.transaction_type == TransactionType.EXPENSE:\n                # Find matching categorization result\n                for result in categorization_results:\n                    if result.transaction_id == transaction.id:\n                        transaction = categorizer.apply_categorization(transaction, result)\n                        break\n            categorized_transactions.append(transaction)\n    \n        # Calculate taxable income with categorized expenses\n        taxable_income = 0\n        business_expenses = 0\n        personal_expenses = 0\n    \n        for transaction in categorized_transactions:\n            if transaction.transaction_type == TransactionType.INCOME:\n                taxable_income += transaction.amount\n            elif transaction.transaction_type == TransactionType.EXPENSE:\n                # Apply business use percentage\n                if hasattr(transaction, 'business_use_percentage') and transaction.business_use_percentage > 0:\n                    business_amount = transaction.amount * (transaction.business_use_percentage / 100)\n                    personal_amount = transaction.amount - business_amount\n    \n                    business_expenses += business_amount\n                    personal_expenses += personal_amount\n                else:\n                    # Default to personal if no business use percentage\n                    personal_expenses += transaction.amount\n    \n        # Subtract business expenses from taxable income\n        adjusted_taxable_income = taxable_income - business_expenses\n    \n        # Calculate tax using simplified calculation (25% flat rate)\n        # to avoid validation issues with the TaxLiability model\n        full_tax_amount = taxable_income * 0.25\n        adjusted_tax_amount = adjusted_taxable_income * 0.25\n    \n        # Assert that the adjusted tax is lower\n>       assert adjusted_tax_amount < full_tax_amount\nE       assert 0.0 < 0.0\n\ntests/freelancer/integration/test_expense_tax_integration.py:156: AssertionError"}, "teardown": {"duration": 0.00015011290088295937, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact", "lineno": 170, "outcome": "failed", "keywords": ["test_expense_recategorization_tax_impact", "TestExpenseTaxIntegration", "test_expense_tax_integration.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011898204684257507, "outcome": "passed"}, "call": {"duration": 0.00020519178360700607, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_expense_tax_integration.py", "lineno": 200, "message": "TypeError: unsupported operand type(s) for *: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_expense_tax_integration.py", "lineno": 200, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_expense_tax_integration.TestExpenseTaxIntegration object at 0x7fc8600934f0>\n\n    def test_expense_recategorization_tax_impact(self):\n        \"\"\"Test how correcting expense categorization affects tax liability.\"\"\"\n        # Set up expense categorizer\n        categorizer = ExpenseCategorizer()\n    \n        # Create a transaction that's initially categorized as personal\n        transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 15),\n            amount=1000.0,\n            description=\"Equipment purchase initially miscategorized\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        )\n    \n        # Create income transaction\n        income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 10),\n            amount=10000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        # Calculate initial tax with personal categorization (using simple 25% flat rate)\n        initial_taxable_income = income_transaction.amount\n>       initial_tax_amount = initial_taxable_income * 0.25\nE       TypeError: unsupported operand type(s) for *: 'decimal.Decimal' and 'float'\n\ntests/freelancer/integration/test_expense_tax_integration.py:200: TypeError"}, "teardown": {"duration": 0.00014955690130591393, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability", "lineno": 18, "outcome": "failed", "keywords": ["test_expense_categorization_impacts_tax_liability", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013117585331201553, "outcome": "passed"}, "call": {"duration": 0.0003028661012649536, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_integration_mocks.py", "lineno": 93, "message": "assert 0 > 0"}, "traceback": [{"path": "tests/freelancer/integration/test_integration_mocks.py", "lineno": 93, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_integration_mocks.TestIntegrationWithMocks object at 0x7fc860093880>\n\n    def test_expense_categorization_impacts_tax_liability(self):\n        \"\"\"Test how business expense categorization impacts tax liability.\"\"\"\n        # Mock transactions\n        transactions = [\n            # Income\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 10),\n                amount=10000.0,\n                description=\"Client payment\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            ),\n            # Business expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 15),\n                amount=2000.0,\n                description=\"Office equipment\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.EQUIPMENT,\n                business_use_percentage=100.0,\n            ),\n            # Personal expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 20),\n                amount=1000.0,\n                description=\"Groceries\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.PERSONAL,\n                business_use_percentage=0.0,\n            ),\n            # Mixed use expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 25),\n                amount=1500.0,\n                description=\"Computer upgrade\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.EQUIPMENT,\n                business_use_percentage=50.0,\n            ),\n        ]\n    \n        # Calculate taxable income with proper classification\n        income = sum(t.amount for t in transactions if t.transaction_type == TransactionType.INCOME)\n        business_expenses = sum(\n            t.amount * (t.business_use_percentage / 100.0)\n            for t in transactions\n            if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n        )\n    \n        taxable_income = income - business_expenses\n    \n        # Now recalculate with the mixed use expense categorized as personal\n        misclassified_transactions = transactions.copy()\n        for t in misclassified_transactions:\n            if t.description == \"Computer upgrade\":\n                t.category = ExpenseCategory.PERSONAL\n                t.business_use_percentage = 0.0\n    \n        misclassified_business_expenses = sum(\n            t.amount * (t.business_use_percentage / 100.0)\n            for t in misclassified_transactions\n            if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n        )\n    \n        misclassified_taxable_income = income - misclassified_business_expenses\n    \n        # Misclassification should result in higher taxable income\n>       assert misclassified_taxable_income > taxable_income\nE       assert 0 > 0\n\ntests/freelancer/integration/test_integration_mocks.py:93: AssertionError"}, "teardown": {"duration": 0.00014934875071048737, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact", "lineno": 95, "outcome": "failed", "keywords": ["test_categorization_correction_tax_impact", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011993385851383209, "outcome": "passed"}, "call": {"duration": 0.00027945684269070625, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_integration_mocks.py", "lineno": 160, "message": "assert 0 < 0"}, "traceback": [{"path": "tests/freelancer/integration/test_integration_mocks.py", "lineno": 160, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_integration_mocks.TestIntegrationWithMocks object at 0x7fc860093a00>\n\n    def test_categorization_correction_tax_impact(self):\n        \"\"\"Test the tax impact of correcting expense categorization.\"\"\"\n        # Mock initial transactions with a miscategorized personal expense\n        transactions = [\n            # Income\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 10),\n                amount=8000.0,\n                description=\"Client payment\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            ),\n            # Correctly categorized business expense\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 15),\n                amount=1000.0,\n                description=\"Software subscription\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.SOFTWARE,\n                business_use_percentage=100.0,\n            ),\n            # Miscategorized expense (business expense categorized as personal)\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 1, 20),\n                amount=2000.0,\n                description=\"Professional development course\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.PERSONAL,  # Incorrectly categorized\n                business_use_percentage=0.0,  # Should be 100%\n            ),\n        ]\n    \n        # Calculate initial tax (with miscategorization)\n        income = sum(t.amount for t in transactions if t.transaction_type == TransactionType.INCOME)\n        initial_business_expenses = sum(\n            t.amount * (t.business_use_percentage / 100.0)\n            for t in transactions\n            if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n        )\n    \n        initial_taxable_income = income - initial_business_expenses\n    \n        # Apply correction\n        corrected_transactions = transactions.copy()\n        for t in corrected_transactions:\n            if t.description == \"Professional development course\":\n                t.category = ExpenseCategory.PROFESSIONAL_DEVELOPMENT\n                t.business_use_percentage = 100.0\n    \n        # Calculate corrected tax\n        corrected_business_expenses = sum(\n            t.amount * (t.business_use_percentage / 100.0)\n            for t in corrected_transactions\n            if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n        )\n    \n        corrected_taxable_income = income - corrected_business_expenses\n    \n        # Correction should result in lower taxable income\n>       assert corrected_taxable_income < initial_taxable_income\nE       assert 0 < 0\n\ntests/freelancer/integration/test_integration_mocks.py:160: AssertionError"}, "teardown": {"duration": 0.00014833826571702957, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation", "lineno": 162, "outcome": "passed", "keywords": ["test_quarterly_tax_estimation", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011855317279696465, "outcome": "passed"}, "call": {"duration": 0.000424881000071764, "outcome": "passed"}, "teardown": {"duration": 0.00013050995767116547, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability", "lineno": 304, "outcome": "failed", "keywords": ["test_multi_year_project_profitability", "TestIntegrationWithMocks", "test_integration_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001348797231912613, "outcome": "passed"}, "call": {"duration": 0.0002607163041830063, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_integration_mocks.py", "lineno": 429, "message": "ZeroDivisionError: division by zero"}, "traceback": [{"path": "tests/freelancer/integration/test_integration_mocks.py", "lineno": 429, "message": "ZeroDivisionError"}], "longrepr": "self = <tests.freelancer.integration.test_integration_mocks.TestIntegrationWithMocks object at 0x7fc860093d00>\n\n    def test_multi_year_project_profitability(self):\n        \"\"\"Test profitability analysis for a project spanning multiple tax years.\"\"\"\n        # Create a project spanning 2022-2023\n        project_id = \"multi-year-project-123\"\n    \n        # 2022 project transactions (Year 1)\n        year1_transactions = [\n            # Income from project in year 1\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 6, 15),\n                amount=20000.0,\n                description=\"Project milestone payment 1\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n                project_id=project_id,\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 11, 1),\n                amount=30000.0,\n                description=\"Project milestone payment 2\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n                project_id=project_id,\n            ),\n            # Expenses for project in year 1\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 5, 1),\n                amount=5000.0,\n                description=\"Project equipment\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.EQUIPMENT,\n                business_use_percentage=100.0,\n                project_id=project_id,\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 7, 15),\n                amount=10000.0,\n                description=\"Project software licenses\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.SOFTWARE,\n                business_use_percentage=100.0,\n                project_id=project_id,\n            ),\n        ]\n    \n        # 2023 project transactions (Year 2)\n        year2_transactions = [\n            # Income from project in year 2\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, 3, 1),\n                amount=25000.0,\n                description=\"Project milestone payment 3\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n                project_id=project_id,\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, 6, 30),\n                amount=40000.0,\n                description=\"Project final payment\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n                project_id=project_id,\n            ),\n            # Expenses for project in year 2\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, 2, 15),\n                amount=8000.0,\n                description=\"Project consulting\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.PROFESSIONAL_SERVICES,\n                business_use_percentage=100.0,\n                project_id=project_id,\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, 5, 1),\n                amount=7000.0,\n                description=\"Project travel expenses\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.TRAVEL,\n                business_use_percentage=100.0,\n                project_id=project_id,\n            ),\n        ]\n    \n        # Calculate project profitability by year\n        all_transactions = year1_transactions + year2_transactions\n    \n        # Calculate year 1 profitability\n        year1_income = sum(t.amount for t in year1_transactions if t.transaction_type == TransactionType.INCOME)\n        year1_expenses = sum(\n            t.amount * (t.business_use_percentage / 100.0)\n            for t in year1_transactions\n            if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n        )\n        year1_profit = year1_income - year1_expenses\n    \n        # Calculate year 2 profitability\n        year2_income = sum(t.amount for t in year2_transactions if t.transaction_type == TransactionType.INCOME)\n        year2_expenses = sum(\n            t.amount * (t.business_use_percentage / 100.0)\n            for t in year2_transactions\n            if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n        )\n        year2_profit = year2_income - year2_expenses\n    \n        # Calculate overall project profitability\n        total_income = year1_income + year2_income\n        total_expenses = year1_expenses + year2_expenses\n        total_profit = total_income - total_expenses\n    \n        # Calculate profit margins\n>       year1_margin = year1_profit / year1_income * 100\nE       ZeroDivisionError: division by zero\n\ntests/freelancer/integration/test_integration_mocks.py:429: ZeroDivisionError"}, "teardown": {"duration": 0.00015277694910764694, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years", "lineno": 232, "outcome": "failed", "keywords": ["test_project_profitability_across_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014242921024560928, "outcome": "passed"}, "call": {"duration": 0.00044283317402005196, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_multi_year_projects.py", "lineno": 303, "message": "AssertionError: assert 0.0 > 0\n +  where 0.0 = ProjectProfitability(project_id='cross_year_project', project_name='Long-term Website Redesign', client_id='client1', ...e.ROI: 'roi'>, value=1440000.0, calculation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 777082), description=None)]).total_expenses"}, "traceback": [{"path": "tests/freelancer/integration/test_multi_year_projects.py", "lineno": 303, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_multi_year_projects.TestMultiYearProjects object at 0x7fc8600cd660>\ncross_year_project = Project(id='cross_year_project', name='Long-term Website Redesign', client_id='client1', start_date=datetime.datetime(...3, 31, 0, 0), status='completed', hourly_rate=90.0, fixed_price=None, estimated_hours=160.0, description=None, tags=[])\ncross_year_time_entries = [TimeEntry(id=UUID('037e3049-200d-47ad-bd7e-aace14a772a8'), project_id='cross_year_project', start_time=datetime.datet..., 11, 8, 13, 28, 53, 751439), duration_minutes=268.0, description='Discovery phase work', billable=True, tags=[]), ...]\ncross_year_expenses = [BaseTransaction(id='2cb980d5-5d16-4636-b6ec-44b77eb2869c', date=2022-11-10 00:00:00, amount=300.0, description='Softw...950f-c0a3099e4c73', date=2023-03-15 00:00:00, amount=500.0, description='Client presentation materials', type=expense)]\ncross_year_invoices = [Invoice(id='inv-cross_year_project-1', client_id='client1', project_id='cross_year_project', issue_date=datetime.date...bsite redesign project', line_items=[{'description': 'Final payment for website redesign project', 'amount': 3600.0}])]\n\n    def test_project_profitability_across_tax_years(\n        self, cross_year_project, cross_year_time_entries, cross_year_expenses, cross_year_invoices\n    ):\n        \"\"\"Test profitability analysis for a project spanning multiple tax years.\"\"\"\n        # Set up project profiler\n        profiler = ProjectProfiler()\n    \n        # Analyze project profitability\n        result = profiler.analyze_project_profitability(\n            project=cross_year_project,\n            time_entries=cross_year_time_entries,\n            transactions=cross_year_expenses,\n            invoices=cross_year_invoices\n        )\n    \n        # Verify overall profitability\n        assert result is not None\n        assert result.total_hours > 0\n        assert result.total_revenue > 0\n        assert result.total_profit > 0\n        assert result.profit_margin > 0\n    \n        # Define time periods for each year\n        year_2022_start = datetime(2022, 1, 1)\n        year_2022_end = datetime(2022, 12, 31)\n        year_2023_start = datetime(2023, 1, 1)\n        year_2023_end = datetime(2023, 12, 31)\n    \n        # Filter data by year\n        time_entries_2022 = [te for te in cross_year_time_entries if te.start_time.year == 2022]\n        expenses_2022 = [exp for exp in cross_year_expenses if exp.date.year == 2022]\n        invoices_2022 = [inv for inv in cross_year_invoices if inv.issue_date.year == 2022]\n    \n        time_entries_2023 = [te for te in cross_year_time_entries if te.start_time.year == 2023]\n        expenses_2023 = [exp for exp in cross_year_expenses if exp.date.year == 2023]\n        invoices_2023 = [inv for inv in cross_year_invoices if inv.issue_date.year == 2023]\n    \n        # Analyze 2022 portion\n        result_2022 = profiler.analyze_project_profitability(\n            project=cross_year_project,\n            time_entries=time_entries_2022,\n            transactions=expenses_2022,\n            invoices=invoices_2022\n        )\n    \n        # Analyze 2023 portion\n        result_2023 = profiler.analyze_project_profitability(\n            project=cross_year_project,\n            time_entries=time_entries_2023,\n            transactions=expenses_2023,\n            invoices=invoices_2023\n        )\n    \n        # Verify results for each year\n        assert result_2022 is not None\n        assert result_2023 is not None\n    \n        # Verify hours are recorded for each year\n        assert result_2022.total_hours > 0\n        assert result_2023.total_hours > 0\n        # Note: We're not comparing sum of individual years with total because\n        # the profitability analyzer treats each analysis independently\n    \n        # Verify revenue is recorded for each year\n        assert result_2022.total_revenue > 0\n        assert result_2023.total_revenue > 0\n        # Note: We're not comparing sum of individual years with total because\n        # the profitability analyzer treats each analysis independently\n    \n        # Verify expenses are recorded for each year\n>       assert result_2022.total_expenses > 0\nE       AssertionError: assert 0.0 > 0\nE        +  where 0.0 = ProjectProfitability(project_id='cross_year_project', project_name='Long-term Website Redesign', client_id='client1', ...e.ROI: 'roi'>, value=1440000.0, calculation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 777082), description=None)]).total_expenses\n\ntests/freelancer/integration/test_multi_year_projects.py:303: AssertionError"}, "teardown": {"duration": 0.0002428707666695118, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project", "lineno": 342, "outcome": "failed", "keywords": ["test_tax_implications_of_cross_year_project", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014132270589470863, "outcome": "passed"}, "call": {"duration": 0.00032778922468423843, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_multi_year_projects.py", "lineno": 400, "message": "TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_multi_year_projects.py", "lineno": 400, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_multi_year_projects.TestMultiYearProjects object at 0x7fc8600cd870>\ncross_year_project = Project(id='cross_year_project', name='Long-term Website Redesign', client_id='client1', start_date=datetime.datetime(...3, 31, 0, 0), status='completed', hourly_rate=90.0, fixed_price=None, estimated_hours=160.0, description=None, tags=[])\ncross_year_time_entries = [TimeEntry(id=UUID('e9c689a0-848e-43ea-91ad-b56afdb719c6'), project_id='cross_year_project', start_time=datetime.datet...2, 11, 8, 13, 7, 26, 693794), duration_minutes=247.0, description='Discovery phase work', billable=True, tags=[]), ...]\ncross_year_expenses = [BaseTransaction(id='4f5854c4-fcba-4ac5-83cf-ac6880c9af76', date=2022-11-10 00:00:00, amount=300.0, description='Softw...99d3-843284695f8a', date=2023-03-15 00:00:00, amount=500.0, description='Client presentation materials', type=expense)]\ncross_year_invoices = [Invoice(id='inv-cross_year_project-1', client_id='client1', project_id='cross_year_project', issue_date=datetime.date...bsite redesign project', line_items=[{'description': 'Final payment for website redesign project', 'amount': 3600.0}])]\n\n    def test_tax_implications_of_cross_year_project(\n        self, cross_year_project, cross_year_time_entries, cross_year_expenses, cross_year_invoices\n    ):\n        \"\"\"Test tax implications of a project spanning multiple tax years.\"\"\"\n        # Set up tax manager\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Set up project profiler\n        profiler = ProjectProfiler()\n    \n        # Filter data by year\n        time_entries_2022 = [te for te in cross_year_time_entries if te.start_time.year == 2022]\n        expenses_2022 = [exp for exp in cross_year_expenses if exp.date.year == 2022]\n        invoices_2022 = [inv for inv in cross_year_invoices if inv.issue_date.year == 2022]\n    \n        time_entries_2023 = [te for te in cross_year_time_entries if te.start_time.year == 2023]\n        expenses_2023 = [exp for exp in cross_year_expenses if exp.date.year == 2023]\n        invoices_2023 = [inv for inv in cross_year_invoices if inv.issue_date.year == 2023]\n    \n        # Analyze 2022 portion\n        result_2022 = profiler.analyze_project_profitability(\n            project=cross_year_project,\n            time_entries=time_entries_2022,\n            transactions=expenses_2022,\n            invoices=invoices_2022\n        )\n    \n        # Analyze 2023 portion\n        result_2023 = profiler.analyze_project_profitability(\n            project=cross_year_project,\n            time_entries=time_entries_2023,\n            transactions=expenses_2023,\n            invoices=invoices_2023\n        )\n    \n        # Create income transactions from invoices\n        income_transactions = []\n        for invoice in cross_year_invoices:\n            if invoice.payment_date:\n                income_tx = Transaction(\n                    id=uuid.uuid4(),\n                    date=invoice.payment_date,\n                    amount=invoice.amount,\n                    description=f\"Payment for invoice {invoice.id}\",\n                    transaction_type=TransactionType.INCOME,\n                    account_id=\"checking123\",\n                    client_id=invoice.client_id,\n                    project_id=invoice.project_id,\n                )\n                income_transactions.append(income_tx)\n    \n        # Calculate tax implications for each year using simplified flat rate\n        # For 2022\n        income_2022 = sum(tx.amount for tx in income_transactions\n                         if tx.date.year == 2022)\n        expenses_2022 = result_2022.total_expenses\n>       taxable_income_2022 = income_2022 - expenses_2022\nE       TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'\n\ntests/freelancer/integration/test_multi_year_projects.py:400: TypeError"}, "teardown": {"duration": 0.00026646675541996956, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow", "lineno": 463, "outcome": "failed", "keywords": ["test_cross_year_project_cash_flow", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0014081378467381, "outcome": "passed"}, "call": {"duration": 0.00018214574083685875, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_multi_year_projects.py", "lineno": 491, "message": "TypeError: unsupported operand type(s) for -: 'float' and 'decimal.Decimal'"}, "traceback": [{"path": "tests/freelancer/integration/test_multi_year_projects.py", "lineno": 491, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_multi_year_projects.TestMultiYearProjects object at 0x7fc8600cda80>\ncross_year_project = Project(id='cross_year_project', name='Long-term Website Redesign', client_id='client1', start_date=datetime.datetime(...3, 31, 0, 0), status='completed', hourly_rate=90.0, fixed_price=None, estimated_hours=160.0, description=None, tags=[])\ncross_year_time_entries = [TimeEntry(id=UUID('22dc6086-afbc-4261-948f-f8ac42ab1355'), project_id='cross_year_project', start_time=datetime.datet..., 11, 8, 12, 29, 10, 997370), duration_minutes=209.0, description='Discovery phase work', billable=True, tags=[]), ...]\ncross_year_expenses = [BaseTransaction(id='4f1b63f7-0536-4322-80f4-c56bdb98c7d0', date=2022-11-10 00:00:00, amount=300.0, description='Softw...9662-3aa57e4eeb04', date=2023-03-15 00:00:00, amount=500.0, description='Client presentation materials', type=expense)]\ncross_year_invoices = [Invoice(id='inv-cross_year_project-1', client_id='client1', project_id='cross_year_project', issue_date=datetime.date...bsite redesign project', line_items=[{'description': 'Final payment for website redesign project', 'amount': 3600.0}])]\n\n    def test_cross_year_project_cash_flow(\n        self, cross_year_project, cross_year_time_entries, cross_year_expenses, cross_year_invoices\n    ):\n        \"\"\"Test cash flow analysis for a project spanning multiple tax years.\"\"\"\n        # Calculate monthly cash flow\n        monthly_cash_flow = {}\n    \n        # Process invoices (income)\n        for invoice in cross_year_invoices:\n            if invoice.payment_date:\n                year_month = (invoice.payment_date.year, invoice.payment_date.month)\n                if year_month not in monthly_cash_flow:\n                    monthly_cash_flow[year_month] = {\"income\": 0, \"expenses\": 0, \"net\": 0}\n    \n                monthly_cash_flow[year_month][\"income\"] += invoice.amount\n    \n        # Process expenses\n        for expense in cross_year_expenses:\n            year_month = (expense.date.year, expense.date.month)\n            if year_month not in monthly_cash_flow:\n                monthly_cash_flow[year_month] = {\"income\": 0, \"expenses\": 0, \"net\": 0}\n    \n            monthly_cash_flow[year_month][\"expenses\"] += expense.amount\n    \n        # Calculate net cash flow\n        for year_month in monthly_cash_flow:\n            monthly_cash_flow[year_month][\"net\"] = (\n>               monthly_cash_flow[year_month][\"income\"] -\n                monthly_cash_flow[year_month][\"expenses\"]\n            )\nE           TypeError: unsupported operand type(s) for -: 'float' and 'decimal.Decimal'\n\ntests/freelancer/integration/test_multi_year_projects.py:491: TypeError"}, "teardown": {"duration": 0.0002440321259200573, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years", "lineno": 553, "outcome": "passed", "keywords": ["test_project_spanning_three_tax_years", "TestMultiYearProjects", "test_multi_year_projects.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012169359251856804, "outcome": "passed"}, "call": {"duration": 0.00043128710240125656, "outcome": "passed"}, "teardown": {"duration": 0.00011679017916321754, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012177787721157074, "outcome": "passed"}, "call": {"duration": 0.0003028600476682186, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/tax/tax_manager.py", "lineno": 299, "message": "TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_mocks.py", "lineno": 108, "message": ""}, {"path": "personal_finance_tracker/tax/tax_manager.py", "lineno": 478, "message": "in calculate_quarterly_tax_payment"}, {"path": "personal_finance_tracker/tax/tax_manager.py", "lineno": 299, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_mocks.TestQuarterlyTaxPreparationMocks object at 0x7fc860114d60>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with mocks.\"\"\"\n        # Set up the required components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Create mock transactions for Q2 2022\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Calculate quarter dates\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n        current_quarter = next(q for q in quarters if q.quarter == quarter_number)\n    \n        # Create sample transactions\n        income_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 5, 15),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        expense_tx1 = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 5, 10),\n            amount=500.0,\n            description=\"Software subscription\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        expense_tx2 = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 20),\n            amount=300.0,\n            description=\"Office supplies\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        # Mock categorization process\n        categorized_expense1 = Transaction(\n            id=expense_tx1.id,\n            date=expense_tx1.date,\n            amount=expense_tx1.amount,\n            description=expense_tx1.description,\n            transaction_type=expense_tx1.transaction_type,\n            account_id=expense_tx1.account_id,\n            category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=100.0,\n        )\n    \n        categorized_expense2 = Transaction(\n            id=expense_tx2.id,\n            date=expense_tx2.date,\n            amount=expense_tx2.amount,\n            description=expense_tx2.description,\n            transaction_type=expense_tx2.transaction_type,\n            account_id=expense_tx2.account_id,\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            business_use_percentage=100.0,\n        )\n    \n        quarter_transactions = [income_tx, categorized_expense1, categorized_expense2]\n    \n        # Calculate taxable income\n        income = income_tx.amount\n        expenses = categorized_expense1.amount + categorized_expense2.amount\n        taxable_income = income - expenses\n    \n        # Calculate quarterly tax payment\n>       quarterly_tax = tax_manager.calculate_quarterly_tax_payment(\n            quarterly_taxable_income=taxable_income,\n            ytd_taxable_income=taxable_income,  # Simplified: only using Q2 income\n            tax_year=tax_year,\n            quarter=quarter_number,\n        )\n\ntests/freelancer/integration/test_quarterly_tax_mocks.py:108: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/tax/tax_manager.py:478: in calculate_quarterly_tax_payment\n    ytd_federal_tax = self.calculate_federal_tax(ytd_taxable_income, tax_year)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.tax.tax_manager.TaxManager object at 0x7fc85bc68340>\ntaxable_income = Decimal('7200.0'), tax_year = 2022, filing_status = None\n\n    def calculate_federal_tax(\n        self,\n        taxable_income: float,\n        tax_year: int,\n        filing_status: Optional[FilingStatus] = None,\n    ) -> float:\n        \"\"\"\n        Calculate federal income tax.\n    \n        Args:\n            taxable_income: Taxable income amount\n            tax_year: Tax year\n            filing_status: Filing status (defaults to instance filing status)\n    \n        Returns:\n            Federal tax amount\n        \"\"\"\n        # Get tax brackets\n        status = filing_status or self.filing_status\n        brackets = self.get_tax_brackets(TaxJurisdiction.FEDERAL, tax_year, status)\n    \n        if not brackets:\n            raise ValueError(f\"No federal tax brackets for {tax_year} and {status}\")\n    \n        # Calculate tax\n        tax = 0.0\n        prev_threshold = 0.0\n    \n        for i, threshold in enumerate(brackets.income_thresholds):\n            rate = brackets.rates[i] / 100  # Convert percentage to decimal\n    \n            if taxable_income <= threshold:\n>               tax += (taxable_income - prev_threshold) * rate\nE               TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'\n\npersonal_finance_tracker/tax/tax_manager.py:299: TypeError"}, "teardown": {"duration": 0.00015206309035420418, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments", "lineno": 139, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012101884931325912, "outcome": "passed"}, "call": {"duration": 0.0002615605480968952, "outcome": "passed"}, "teardown": {"duration": 0.00010724877938628197, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing", "lineno": 190, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparationMocks", "test_quarterly_tax_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012050475925207138, "outcome": "passed"}, "call": {"duration": 0.00023149093613028526, "outcome": "passed"}, "teardown": {"duration": 0.00010980013757944107, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012067798525094986, "outcome": "passed"}, "call": {"duration": 0.0005137370899319649, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_quarterly_tax_preparation.py", "lineno": 257, "message": "AssertionError: assert 0.0 > 0\n +  where 0.0 = EstimatedPayment(tax_year=2022, quarter=2, jurisdiction=<TaxJurisdiction.FEDERAL: 'federal'>, due_date=datetime.dateti...ax=None, calculation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 845460), notes='Estimated Q2 tax payment for 2022').payment_amount"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_preparation.py", "lineno": 257, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation.TestQuarterlyTaxPreparation object at 0x7fc860115720>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with simplified transactions.\"\"\"\n        # Set up the required components\n        expense_categorizer = ExpenseCategorizer()\n        income_manager = IncomeManager()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n    \n        # Load default tax brackets\n        tax_manager.load_default_brackets()\n    \n        # Add tax brackets for test year (2022)\n        tax_brackets_2022 = TaxBracket(\n            jurisdiction=TaxJurisdiction.FEDERAL,\n            filing_status=FilingStatus.SINGLE,\n            tax_year=2022,\n            income_thresholds=[0, 10275, 41775, 89075, 170050, 215950, 539900],\n            rates=[10, 12, 22, 24, 32, 35, 37],\n        )\n        tax_manager.set_tax_brackets([tax_brackets_2022])\n    \n        # Add a few categorization rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\n    \n        for rule in rules:\n            expense_categorizer.add_categorization_rule(rule)\n    \n        # Define the quarter to prepare taxes for (Q2 2022)\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Calculate quarter dates\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n        current_quarter = next(q for q in quarters if q.quarter == quarter_number)\n    \n        # Create sample transactions for Q1 and Q2\n        # Q1 transactions\n        q1_transactions = []\n    \n        # Q1 Income\n        q1_income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 2, 15),\n            amount=10000.0,\n            description=\"Q1 Income\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n        q1_transactions.append(q1_income_transaction)\n    \n        # Q1 Expenses\n        q1_expense_transaction1 = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 2, 20),\n            amount=1000.0,\n            description=\"software subscription\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n        q1_transactions.append(q1_expense_transaction1)\n    \n        q1_expense_transaction2 = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 3, 10),\n            amount=500.0,\n            description=\"office supplies\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n        q1_transactions.append(q1_expense_transaction2)\n    \n        # Q2 transactions\n        q2_transactions = []\n    \n        # Q2 Income\n        q2_income_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 5, 15),\n            amount=12000.0,\n            description=\"Q2 Income\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n        q2_transactions.append(q2_income_transaction)\n    \n        # Q2 Expenses\n        q2_expense_transaction1 = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 5, 20),\n            amount=1200.0,\n            description=\"software subscription Q2\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n        q2_transactions.append(q2_expense_transaction1)\n    \n        q2_expense_transaction2 = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 6, 10),\n            amount=600.0,\n            description=\"office supplies Q2\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n        q2_transactions.append(q2_expense_transaction2)\n    \n        # Combine all transactions\n        all_transactions = q1_transactions + q2_transactions\n        quarter_transactions = q2_transactions\n    \n        # Step 1: Categorize expenses for the quarter\n        expense_transactions = [\n            tx for tx in quarter_transactions\n            if tx.transaction_type == TransactionType.EXPENSE\n        ]\n    \n        categorization_results = expense_categorizer.categorize_transactions(expense_transactions)\n    \n        # Apply categorizations\n        categorized_expenses = []\n        for transaction in expense_transactions:\n            for result in categorization_results:\n                if result.transaction_id == transaction.id:\n                    categorized_tx = expense_categorizer.apply_categorization(transaction, result)\n                    categorized_expenses.append(categorized_tx)\n                    break\n    \n        # Step 2: Calculate income for the quarter\n        income_transactions = [\n            tx for tx in quarter_transactions\n            if tx.transaction_type == TransactionType.INCOME\n        ]\n    \n        # Calculate total quarterly income\n        quarterly_income = sum(tx.amount for tx in income_transactions)\n    \n        # Step 3: Generate an expense summary for the quarter\n        expense_summary = expense_categorizer.generate_expense_summary(\n            categorized_expenses,\n            current_quarter.start_date,\n            current_quarter.end_date\n        )\n    \n        # Step 4: Calculate taxable income (income - business expenses)\n        business_expenses = expense_summary.business_expenses\n        taxable_income = quarterly_income - business_expenses\n    \n        # Calculate year-to-date values (Q1 + Q2)\n        ytd_start_date = datetime(tax_year, 1, 1)\n        ytd_end_date = current_quarter.end_date\n    \n        ytd_transactions = all_transactions\n    \n        ytd_income_transactions = [\n            tx for tx in ytd_transactions\n            if tx.transaction_type == TransactionType.INCOME\n        ]\n    \n        ytd_expense_transactions = [\n            tx for tx in ytd_transactions\n            if tx.transaction_type == TransactionType.EXPENSE\n        ]\n    \n        # Categorize YTD expenses\n        ytd_categorization_results = expense_categorizer.categorize_transactions(ytd_expense_transactions)\n    \n        ytd_categorized_expenses = []\n        for transaction in ytd_expense_transactions:\n            for result in ytd_categorization_results:\n                if result.transaction_id == transaction.id:\n                    categorized_tx = expense_categorizer.apply_categorization(transaction, result)\n                    ytd_categorized_expenses.append(categorized_tx)\n                    break\n    \n        # Generate YTD expense summary\n        ytd_expense_summary = expense_categorizer.generate_expense_summary(\n            ytd_categorized_expenses,\n            ytd_start_date,\n            ytd_end_date\n        )\n    \n        # Calculate YTD income\n        ytd_income = sum(tx.amount for tx in ytd_income_transactions)\n    \n        # Calculate YTD taxable income\n        ytd_business_expenses = ytd_expense_summary.business_expenses\n        ytd_taxable_income = ytd_income - ytd_business_expenses\n    \n        # Step 5: Calculate estimated quarterly tax payment\n        quarterly_tax_calculation = tax_manager.calculate_quarterly_tax_payment(\n            quarterly_taxable_income=taxable_income,\n            ytd_taxable_income=ytd_taxable_income,\n            tax_year=tax_year,\n            quarter=quarter_number\n        )\n    \n        # Step 6: Generate a tax payment transaction for the quarter\n        tax_payment_transaction = Transaction(\n            id=uuid.uuid4(),\n            date=current_quarter.due_date,\n            amount=quarterly_tax_calculation.payment_amount,\n            description=f\"Q{quarter_number} {tax_year} Estimated Tax Payment\",\n            transaction_type=TransactionType.TAX_PAYMENT,\n            account_id=\"checking123\",\n        )\n    \n        # Verify the tax calculation\n        assert quarterly_tax_calculation.quarter == quarter_number\n        assert quarterly_tax_calculation.tax_year == tax_year\n>       assert quarterly_tax_calculation.payment_amount > 0\nE       AssertionError: assert 0.0 > 0\nE        +  where 0.0 = EstimatedPayment(tax_year=2022, quarter=2, jurisdiction=<TaxJurisdiction.FEDERAL: 'federal'>, due_date=datetime.dateti...ax=None, calculation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 845460), notes='Estimated Q2 tax payment for 2022').payment_amount\n\ntests/freelancer/integration/test_quarterly_tax_preparation.py:257: AssertionError"}, "teardown": {"duration": 0.0001524742692708969, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments", "lineno": 285, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012035388499498367, "outcome": "passed"}, "call": {"duration": 0.000488561112433672, "outcome": "passed"}, "teardown": {"duration": 0.00011270307004451752, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing", "lineno": 423, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparation", "test_quarterly_tax_preparation.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010826624929904938, "outcome": "passed"}, "call": {"duration": 0.0006606616079807281, "outcome": "passed"}, "teardown": {"duration": 0.00013742595911026, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation", "lineno": 30, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationMock", "test_quarterly_tax_preparation_mock.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012675300240516663, "outcome": "passed"}, "call": {"duration": 0.00030959583818912506, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/tax/tax_manager.py", "lineno": 299, "message": "TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py", "lineno": 119, "message": ""}, {"path": "personal_finance_tracker/tax/tax_manager.py", "lineno": 478, "message": "in calculate_quarterly_tax_payment"}, {"path": "personal_finance_tracker/tax/tax_manager.py", "lineno": 299, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation_mock.TestQuarterlyTaxPreparationMock object at 0x7fc860115990>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with mock data.\"\"\"\n        # Set up components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Define test data\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Calculate quarter dates\n        quarters = tax_manager.calculate_tax_quarters(tax_year)\n        current_quarter = next(q for q in quarters if q.quarter == quarter_number)\n    \n        # Create mock transactions\n        business_expenses = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 4, 15),\n                amount=1200.0,\n                description=\"Office supplies purchase\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, 5, 10),\n                amount=500.0,\n                description=\"Software subscription\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n            ),\n        ]\n    \n        income_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 5),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        # Add expense categorization rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\n    \n        for rule in rules:\n            expense_categorizer.add_categorization_rule(rule)\n    \n        # Categorize expenses\n        categorization_results = expense_categorizer.categorize_transactions(business_expenses)\n    \n        # Apply categorizations\n        categorized_expenses = []\n        for tx in business_expenses:\n            for result in categorization_results:\n                if result.transaction_id == tx.id:\n                    categorized_tx = expense_categorizer.apply_categorization(tx, result)\n                    categorized_expenses.append(categorized_tx)\n                    break\n    \n        # Calculate taxable income\n        total_income = income_tx.amount\n        business_expense_amount = sum(\n            tx.amount * (tx.business_use_percentage / 100.0)\n            for tx in categorized_expenses\n            if tx.business_use_percentage is not None\n        )\n    \n        taxable_income = total_income - business_expense_amount\n    \n        # Calculate quarterly tax payment\n>       quarterly_tax = tax_manager.calculate_quarterly_tax_payment(\n            quarterly_taxable_income=taxable_income,\n            ytd_taxable_income=taxable_income,  # Assuming this is the only income YTD\n            tax_year=tax_year,\n            quarter=quarter_number\n        )\n\ntests/freelancer/integration/test_quarterly_tax_preparation_mock.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/tax/tax_manager.py:478: in calculate_quarterly_tax_payment\n    ytd_federal_tax = self.calculate_federal_tax(ytd_taxable_income, tax_year)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.tax.tax_manager.TaxManager object at 0x7fc85bcd06d0>\ntaxable_income = Decimal('8000.0'), tax_year = 2022, filing_status = None\n\n    def calculate_federal_tax(\n        self,\n        taxable_income: float,\n        tax_year: int,\n        filing_status: Optional[FilingStatus] = None,\n    ) -> float:\n        \"\"\"\n        Calculate federal income tax.\n    \n        Args:\n            taxable_income: Taxable income amount\n            tax_year: Tax year\n            filing_status: Filing status (defaults to instance filing status)\n    \n        Returns:\n            Federal tax amount\n        \"\"\"\n        # Get tax brackets\n        status = filing_status or self.filing_status\n        brackets = self.get_tax_brackets(TaxJurisdiction.FEDERAL, tax_year, status)\n    \n        if not brackets:\n            raise ValueError(f\"No federal tax brackets for {tax_year} and {status}\")\n    \n        # Calculate tax\n        tax = 0.0\n        prev_threshold = 0.0\n    \n        for i, threshold in enumerate(brackets.income_thresholds):\n            rate = brackets.rates[i] / 100  # Convert percentage to decimal\n    \n            if taxable_income <= threshold:\n>               tax += (taxable_income - prev_threshold) * rate\nE               TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'\n\npersonal_finance_tracker/tax/tax_manager.py:299: TypeError"}, "teardown": {"duration": 0.00015397090464830399, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation", "lineno": 33, "outcome": "failed", "keywords": ["test_comprehensive_quarterly_tax_preparation", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013348693028092384, "outcome": "passed"}, "call": {"duration": 0.0003126300871372223, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/tax/tax_manager.py", "lineno": 299, "message": "TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py", "lineno": 119, "message": ""}, {"path": "personal_finance_tracker/tax/tax_manager.py", "lineno": 478, "message": "in calculate_quarterly_tax_payment"}, {"path": "personal_finance_tracker/tax/tax_manager.py", "lineno": 299, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_quarterly_tax_preparation_simplified.TestQuarterlyTaxPreparationSimplified object at 0x7fc860116050>\n\n    def test_comprehensive_quarterly_tax_preparation(self):\n        \"\"\"Test a comprehensive end-to-end quarterly tax preparation process with simplified approach.\"\"\"\n        # Set up components\n        expense_categorizer = ExpenseCategorizer()\n        tax_manager = TaxManager(FilingStatus.SINGLE)\n        tax_manager.load_default_brackets()\n    \n        # Add expense categorization rules\n        rules = [\n            CategorizationRule(\n                name=\"Software Rule\",\n                category=ExpenseCategory.SOFTWARE,\n                keyword_patterns=[\"software\", \"subscription\"],\n                business_use_percentage=100.0,\n                priority=10,\n            ),\n            CategorizationRule(\n                name=\"Office Supplies Rule\",\n                category=ExpenseCategory.BUSINESS_SUPPLIES,\n                keyword_patterns=[\"supplies\", \"office\"],\n                business_use_percentage=100.0,\n                priority=5,\n            ),\n        ]\n    \n        for rule in rules:\n            expense_categorizer.add_categorization_rule(rule)\n    \n        # Define test data\n        tax_year = 2022\n        quarter_number = 2\n    \n        # Create some transactions\n        business_expense = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 15),\n            amount=1200.0,\n            description=\"Office supplies purchase\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        software_expense = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 5, 10),\n            amount=500.0,\n            description=\"Software subscription\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n        )\n    \n        income_tx = Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 4, 5),\n            amount=8000.0,\n            description=\"Client payment\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        )\n    \n        expense_transactions = [business_expense, software_expense]\n    \n        # Categorize expenses\n        categorization_results = expense_categorizer.categorize_transactions(expense_transactions)\n    \n        # Apply categorizations\n        categorized_expenses = []\n        for tx in expense_transactions:\n            for result in categorization_results:\n                if result.transaction_id == tx.id:\n                    categorized_tx = expense_categorizer.apply_categorization(tx, result)\n                    categorized_expenses.append(categorized_tx)\n                    break\n    \n        # Calculate taxable income\n        total_income = income_tx.amount\n        business_expense_amount = sum(\n            tx.amount * (tx.business_use_percentage / 100.0)\n            for tx in categorized_expenses\n            if tx.business_use_percentage is not None\n        )\n    \n        taxable_income = total_income - business_expense_amount\n    \n        # Calculate quarterly tax payment\n>       quarterly_tax = tax_manager.calculate_quarterly_tax_payment(\n            quarterly_taxable_income=taxable_income,\n            ytd_taxable_income=taxable_income,  # Assuming this is the only income YTD\n            tax_year=tax_year,\n            quarter=quarter_number\n        )\n\ntests/freelancer/integration/test_quarterly_tax_preparation_simplified.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/tax/tax_manager.py:478: in calculate_quarterly_tax_payment\n    ytd_federal_tax = self.calculate_federal_tax(ytd_taxable_income, tax_year)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <personal_finance_tracker.tax.tax_manager.TaxManager object at 0x7fc85be15270>\ntaxable_income = Decimal('8000.0'), tax_year = 2022, filing_status = None\n\n    def calculate_federal_tax(\n        self,\n        taxable_income: float,\n        tax_year: int,\n        filing_status: Optional[FilingStatus] = None,\n    ) -> float:\n        \"\"\"\n        Calculate federal income tax.\n    \n        Args:\n            taxable_income: Taxable income amount\n            tax_year: Tax year\n            filing_status: Filing status (defaults to instance filing status)\n    \n        Returns:\n            Federal tax amount\n        \"\"\"\n        # Get tax brackets\n        status = filing_status or self.filing_status\n        brackets = self.get_tax_brackets(TaxJurisdiction.FEDERAL, tax_year, status)\n    \n        if not brackets:\n            raise ValueError(f\"No federal tax brackets for {tax_year} and {status}\")\n    \n        # Calculate tax\n        tax = 0.0\n        prev_threshold = 0.0\n    \n        for i, threshold in enumerate(brackets.income_thresholds):\n            rate = brackets.rates[i] / 100  # Convert percentage to decimal\n    \n            if taxable_income <= threshold:\n>               tax += (taxable_income - prev_threshold) * rate\nE               TypeError: unsupported operand type(s) for -: 'decimal.Decimal' and 'float'\n\npersonal_finance_tracker/tax/tax_manager.py:299: TypeError"}, "teardown": {"duration": 0.00016452372074127197, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments", "lineno": 152, "outcome": "passed", "keywords": ["test_quarterly_tax_with_prior_payments", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012624775990843773, "outcome": "passed"}, "call": {"duration": 0.0002477453090250492, "outcome": "passed"}, "teardown": {"duration": 0.00010519986972212791, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing", "lineno": 209, "outcome": "passed", "keywords": ["test_quarterly_tax_with_income_smoothing", "TestQuarterlyTaxPreparationSimplified", "test_quarterly_tax_preparation_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001135803759098053, "outcome": "passed"}, "call": {"duration": 0.0002997000701725483, "outcome": "passed"}, "teardown": {"duration": 0.00011292612180113792, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years", "lineno": 330, "outcome": "failed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.005141579080373049, "outcome": "passed"}, "call": {"duration": 0.0004312400706112385, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 365, "message": "assert 0 > 0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 365, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_comparison.TestYearOverYearComparison object at 0x7fc860116ec0>\nmulti_year_transactions = [BaseTransaction(id='d3608ea1-f1bb-419a-8eb3-59befab28ae2', date=2021-01-15 00:00:00, amount=2000, description='Client...03-bdbe32e75d25', date=2021-07-15 00:00:00, amount=4000, description='Client payment for Project 6', type=income), ...]\n\n    def test_income_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing income patterns across multiple years.\"\"\"\n        income_manager = IncomeManager()\n    \n        # Process transactions by year\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter income transactions for this year\n            year_transactions = [\n                tx for tx in multi_year_transactions\n                if tx.date.year == year and tx.transaction_type == TransactionType.INCOME\n            ]\n    \n            # Define start and end dates for the year\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            # Calculate monthly income for the year\n            monthly_income_dict = income_manager.calculate_monthly_income(year_transactions, start_date, end_date)\n    \n            # Convert to list format for compatibility with existing code\n            monthly_income = [{\"month\": month, \"amount\": amount} for month, amount in monthly_income_dict.items()]\n    \n            # Store year data\n            year_data[year] = {\n                \"transactions\": year_transactions,\n                \"monthly_income\": monthly_income,\n                \"total_income\": sum(month[\"amount\"] for month in monthly_income),\n                \"month_count\": len(monthly_income),\n                \"average_monthly\": sum(month[\"amount\"] for month in monthly_income) / max(1, len(monthly_income)),\n            }\n    \n        # Compare total income year-over-year\n>       assert year_data[2022][\"total_income\"] > year_data[2021][\"total_income\"]\nE       assert 0 > 0\n\ntests/freelancer/integration/test_year_over_year_comparison.py:365: AssertionError"}, "teardown": {"duration": 0.00018529826775193214, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years", "lineno": 403, "outcome": "failed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.005080945789813995, "outcome": "passed"}, "call": {"duration": 0.0004373290576040745, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 438, "message": "assert 0.0 > 0.0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 438, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_comparison.TestYearOverYearComparison object at 0x7fc860117040>\nmulti_year_transactions = [BaseTransaction(id='eb5533ba-4d37-433d-a0d3-bf76717efe14', date=2021-01-15 00:00:00, amount=2000, description='Client...9a-588f7109eb6e', date=2021-07-15 00:00:00, amount=4000, description='Client payment for Project 6', type=income), ...]\n\n    def test_expense_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing expense patterns across multiple years.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Process expenses by year and category\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter expense transactions for this year\n            year_transactions = [\n                tx for tx in multi_year_transactions\n                if tx.date.year == year and tx.transaction_type == TransactionType.EXPENSE\n            ]\n    \n            # Generate expense summary for the year\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            expense_summary = categorizer.generate_expense_summary(\n                year_transactions, start_date, end_date\n            )\n    \n            # Store data for analysis\n            year_data[year] = {\n                \"transactions\": year_transactions,\n                \"summary\": expense_summary,\n                \"total_expenses\": expense_summary.total_expenses,\n                \"business_expenses\": expense_summary.business_expenses,\n                \"personal_expenses\": expense_summary.personal_expenses,\n                \"by_category\": expense_summary.by_category,\n            }\n    \n        # Compare total expenses year-over-year\n        # Should increase due to inflation and business growth\n>       assert year_data[2022][\"total_expenses\"] > year_data[2021][\"total_expenses\"]\nE       assert 0.0 > 0.0\n\ntests/freelancer/integration/test_year_over_year_comparison.py:438: AssertionError"}, "teardown": {"duration": 0.00017448607832193375, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years", "lineno": 494, "outcome": "failed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.005086007062345743, "outcome": "passed"}, "call": {"duration": 0.0005839169025421143, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 565, "message": "assert 0.0 > 0.0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_comparison.py", "lineno": 565, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_comparison.TestYearOverYearComparison object at 0x7fc8601171c0>\nmulti_year_transactions = [BaseTransaction(id='d99a57fe-ab5b-4723-8ffd-21ca470a68b5', date=2021-01-15 00:00:00, amount=2000, description='Client...f3-85522e4a4646', date=2021-07-15 00:00:00, amount=4000, description='Client payment for Project 6', type=income), ...]\n\n    def test_tax_comparison_across_years(self, multi_year_transactions):\n        \"\"\"Test comparing tax liabilities across multiple years with simplified tax calculations.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Process taxes by year\n        year_data = {}\n    \n        for year in range(2021, 2024):\n            # Filter transactions for this year\n            year_transactions = [tx for tx in multi_year_transactions if tx.date.year == year]\n    \n            # Split into income and expenses\n            income_transactions = [\n                tx for tx in year_transactions\n                if tx.transaction_type == TransactionType.INCOME\n            ]\n    \n            expense_transactions = [\n                tx for tx in year_transactions\n                if tx.transaction_type == TransactionType.EXPENSE\n            ]\n    \n            tax_transactions = [\n                tx for tx in year_transactions\n                if tx.transaction_type == TransactionType.TAX_PAYMENT\n            ]\n    \n            # Calculate total income\n            total_income = sum(tx.amount for tx in income_transactions)\n    \n            # Generate expense summary\n            start_date = datetime(year, 1, 1)\n            end_date = datetime(year, 12, 31)\n    \n            expense_summary = categorizer.generate_expense_summary(\n                expense_transactions, start_date, end_date\n            )\n    \n            # Calculate taxable income\n            taxable_income = total_income - expense_summary.business_expenses\n    \n            # Simplified tax calculation - use basic rates\n            if taxable_income <= 10000:\n                tax_rate = 0.10  # 10%\n            elif taxable_income <= 50000:\n                tax_rate = 0.15  # 15%\n            else:\n                tax_rate = 0.25  # 25%\n    \n            # Calculate tax liability using simplified rate\n            tax_liability = taxable_income * tax_rate\n    \n            # Calculate effective tax rate\n            effective_tax_rate = tax_liability / max(1.0, total_income)\n    \n            # Calculate total tax payments\n            tax_payments = sum(tx.amount for tx in tax_transactions)\n    \n            # Store year data\n            year_data[year] = {\n                \"total_income\": total_income,\n                \"business_expenses\": expense_summary.business_expenses,\n                \"taxable_income\": taxable_income,\n                \"tax_liability\": tax_liability,\n                \"tax_payments\": tax_payments,\n                \"effective_tax_rate\": effective_tax_rate,\n                \"tax_rate\": tax_rate,\n            }\n    \n        # Compare tax liabilities year-over-year (should increase with income)\n>       assert year_data[2022][\"tax_liability\"] > year_data[2021][\"tax_liability\"]\nE       assert 0.0 > 0.0\n\ntests/freelancer/integration/test_year_over_year_comparison.py:565: AssertionError"}, "teardown": {"duration": 0.00018646381795406342, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years", "lineno": 582, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearComparison", "test_year_over_year_comparison.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0026249149814248085, "outcome": "passed"}, "call": {"duration": 0.0001772870309650898, "outcome": "passed"}, "teardown": {"duration": 0.00015891483053565025, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis", "lineno": 18, "outcome": "failed", "keywords": ["test_income_growth_analysis", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.000144073273986578, "outcome": "passed"}, "call": {"duration": 0.0005784099921584129, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 72, "message": "TypeError: unsupported operand type(s) for ** or pow(): 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 75, "message": ""}, {"path": "tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 72, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_mocks.TestYearOverYearComparison object at 0x7fc860117a60>\n\n    def test_income_growth_analysis(self):\n        \"\"\"Test analyzing income growth across multiple years.\"\"\"\n        # Create income transactions for 3 years\n        income_2021 = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2021, month, 15),\n                amount=5000.0 + random.uniform(-500, 500),  # Randomize income a bit\n                description=f\"2021 - Month {month} income\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            )\n            for month in range(1, 13)\n        ]\n    \n        income_2022 = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, month, 15),\n                amount=6000.0 + random.uniform(-500, 500),  # Income increased in 2022\n                description=f\"2022 - Month {month} income\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            )\n            for month in range(1, 13)\n        ]\n    \n        income_2023 = [\n            Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, month, 15),\n                amount=7500.0 + random.uniform(-500, 500),  # Income increased in 2023\n                description=f\"2023 - Month {month} income\",\n                transaction_type=TransactionType.INCOME,\n                account_id=\"checking123\",\n            )\n            for month in range(1, 13)\n        ]\n    \n        # Calculate total income by year\n        total_2021 = sum(t.amount for t in income_2021)\n        total_2022 = sum(t.amount for t in income_2022)\n        total_2023 = sum(t.amount for t in income_2023)\n    \n        # Calculate year-over-year growth\n        growth_2021_2022 = (total_2022 - total_2021) / total_2021 * 100\n        growth_2022_2023 = (total_2023 - total_2022) / total_2022 * 100\n    \n        # Calculate income stability (standard deviation as percentage of mean)\n        def income_stability(transactions):\n            amounts = [t.amount for t in transactions]\n            mean = sum(amounts) / len(amounts)\n            variance = sum((x - mean) ** 2 for x in amounts) / len(amounts)\n            std_dev = variance ** 0.5\n            return (std_dev / mean) * 100  # Lower is more stable\n    \n>       stability_2021 = income_stability(income_2021)\n\ntests/freelancer/integration/test_year_over_year_mocks.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntransactions = [BaseTransaction(id='970ef383-b654-4818-b440-cf5936e52002', date=2021-01-15 00:00:00, amount=5323.857347565532, descri...1250414df', date=2021-06-15 00:00:00, amount=4859.618321703276, description='2021 - Month 6 income', type=income), ...]\n\n    def income_stability(transactions):\n        amounts = [t.amount for t in transactions]\n        mean = sum(amounts) / len(amounts)\n        variance = sum((x - mean) ** 2 for x in amounts) / len(amounts)\n>       std_dev = variance ** 0.5\nE       TypeError: unsupported operand type(s) for ** or pow(): 'decimal.Decimal' and 'float'\n\ntests/freelancer/integration/test_year_over_year_mocks.py:72: TypeError"}, "teardown": {"duration": 0.000148009043186903, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends", "lineno": 90, "outcome": "failed", "keywords": ["test_expense_category_trends", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012229196727275848, "outcome": "passed"}, "call": {"duration": 0.0010516471229493618, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 218, "message": "assert 50 < 0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 218, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_mocks.TestYearOverYearComparison object at 0x7fc860117be0>\n\n    def test_expense_category_trends(self):\n        \"\"\"Test analyzing expense category trends across multiple years.\"\"\"\n        # Create expense categories with increasing business ratio over years\n    \n        # 2021 expenses - 60% business, 40% personal\n        expenses_2021 = []\n    \n        # Business expenses 2021\n        for i in range(10):\n            expenses_2021.append(Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2021, random.randint(1, 12), random.randint(1, 28)),\n                amount=2000.0 + random.uniform(-500, 500),\n                description=f\"2021 Business expense {i+1}\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=random.choice([\n                    ExpenseCategory.BUSINESS_SUPPLIES,\n                    ExpenseCategory.SOFTWARE,\n                    ExpenseCategory.EQUIPMENT\n                ]),\n                business_use_percentage=100.0,\n            ))\n    \n        # Personal expenses 2021\n        for i in range(7):\n            expenses_2021.append(Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2021, random.randint(1, 12), random.randint(1, 28)),\n                amount=1500.0 + random.uniform(-300, 300),\n                description=f\"2021 Personal expense {i+1}\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.PERSONAL,\n                business_use_percentage=0.0,\n            ))\n    \n        # 2022 expenses - 70% business, 30% personal\n        expenses_2022 = []\n    \n        # Business expenses 2022\n        for i in range(14):\n            expenses_2022.append(Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, random.randint(1, 12), random.randint(1, 28)),\n                amount=2200.0 + random.uniform(-500, 500),\n                description=f\"2022 Business expense {i+1}\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=random.choice([\n                    ExpenseCategory.BUSINESS_SUPPLIES,\n                    ExpenseCategory.SOFTWARE,\n                    ExpenseCategory.EQUIPMENT,\n                    ExpenseCategory.MARKETING\n                ]),\n                business_use_percentage=100.0,\n            ))\n    \n        # Personal expenses 2022\n        for i in range(6):\n            expenses_2022.append(Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2022, random.randint(1, 12), random.randint(1, 28)),\n                amount=1600.0 + random.uniform(-300, 300),\n                description=f\"2022 Personal expense {i+1}\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.PERSONAL,\n                business_use_percentage=0.0,\n            ))\n    \n        # 2023 expenses - 80% business, 20% personal\n        expenses_2023 = []\n    \n        # Business expenses 2023\n        for i in range(16):\n            expenses_2023.append(Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, random.randint(1, 12), random.randint(1, 28)),\n                amount=2500.0 + random.uniform(-500, 500),\n                description=f\"2023 Business expense {i+1}\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=random.choice([\n                    ExpenseCategory.BUSINESS_SUPPLIES,\n                    ExpenseCategory.SOFTWARE,\n                    ExpenseCategory.EQUIPMENT,\n                    ExpenseCategory.MARKETING,\n                    ExpenseCategory.PROFESSIONAL_DEVELOPMENT\n                ]),\n                business_use_percentage=100.0,\n            ))\n    \n        # Personal expenses 2023\n        for i in range(4):\n            expenses_2023.append(Transaction(\n                id=uuid.uuid4(),\n                date=datetime(2023, random.randint(1, 12), random.randint(1, 28)),\n                amount=1700.0 + random.uniform(-300, 300),\n                description=f\"2023 Personal expense {i+1}\",\n                transaction_type=TransactionType.EXPENSE,\n                account_id=\"checking123\",\n                category=ExpenseCategory.PERSONAL,\n                business_use_percentage=0.0,\n            ))\n    \n        # Calculate business vs personal ratio for each year\n        def calculate_ratio(transactions):\n            business_expenses = sum(\n                t.amount * (t.business_use_percentage / 100.0)\n                for t in transactions\n                if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n            )\n    \n            total_expenses = sum(\n                t.amount\n                for t in transactions\n                if t.transaction_type == TransactionType.EXPENSE\n            )\n    \n            return (business_expenses / total_expenses) * 100 if total_expenses > 0 else 0\n    \n        ratio_2021 = calculate_ratio(expenses_2021)\n        ratio_2022 = calculate_ratio(expenses_2022)\n        ratio_2023 = calculate_ratio(expenses_2023)\n    \n        # Verify business expense ratio is increasing\n>       assert 50 < ratio_2021 < 70  # Around 60%\nE       assert 50 < 0\n\ntests/freelancer/integration/test_year_over_year_mocks.py:218: AssertionError"}, "teardown": {"duration": 0.00014979112893342972, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison", "lineno": 226, "outcome": "failed", "keywords": ["test_tax_liability_comparison", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012087775394320488, "outcome": "passed"}, "call": {"duration": 0.0003279498778283596, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 346, "message": "assert 0.0 > 0.0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 346, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_mocks.TestYearOverYearComparison object at 0x7fc860117d60>\n\n    def test_tax_liability_comparison(self):\n        \"\"\"Test comparing tax liabilities across multiple years.\"\"\"\n        # Create income and expenses for multiple years with increasing income\n        all_transactions = []\n    \n        # 2021 - Base income\n        income_2021 = 60000.0\n        expenses_2021 = 15000.0\n    \n        all_transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2021, 6, 30),\n            amount=income_2021,\n            description=\"2021 income\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        ))\n    \n        all_transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2021, 6, 30),\n            amount=expenses_2021,\n            description=\"2021 business expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            business_use_percentage=100.0,\n        ))\n    \n        # 2022 - 20% income increase\n        income_2022 = income_2021 * 1.2\n        expenses_2022 = expenses_2021 * 1.15  # 15% expense increase\n    \n        all_transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 6, 30),\n            amount=income_2022,\n            description=\"2022 income\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        ))\n    \n        all_transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 6, 30),\n            amount=expenses_2022,\n            description=\"2022 business expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            business_use_percentage=100.0,\n        ))\n    \n        # 2023 - Another 20% income increase\n        income_2023 = income_2022 * 1.2\n        expenses_2023 = expenses_2022 * 1.15  # 15% expense increase\n    \n        all_transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2023, 6, 30),\n            amount=income_2023,\n            description=\"2023 income\",\n            transaction_type=TransactionType.INCOME,\n            account_id=\"checking123\",\n        ))\n    \n        all_transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2023, 6, 30),\n            amount=expenses_2023,\n            description=\"2023 business expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.BUSINESS_SUPPLIES,\n            business_use_percentage=100.0,\n        ))\n    \n        # Calculate tax liabilities (simplified for mock test)\n        def calculate_tax(year_transactions, year):\n            income = sum(\n                t.amount\n                for t in year_transactions\n                if t.transaction_type == TransactionType.INCOME and t.date.year == year\n            )\n    \n            expenses = sum(\n                t.amount * (t.business_use_percentage / 100.0)\n                for t in year_transactions\n                if t.transaction_type == TransactionType.EXPENSE\n                and t.date.year == year\n                and t.business_use_percentage is not None\n            )\n    \n            taxable_income = income - expenses\n    \n            # Simplified progressive tax brackets\n            if taxable_income <= 20000:\n                return taxable_income * 0.10\n            elif taxable_income <= 50000:\n                return 2000 + (taxable_income - 20000) * 0.15\n            elif taxable_income <= 100000:\n                return 2000 + 4500 + (taxable_income - 50000) * 0.25\n            else:\n                return 2000 + 4500 + 12500 + (taxable_income - 100000) * 0.35\n    \n        tax_2021 = calculate_tax(all_transactions, 2021)\n        tax_2022 = calculate_tax(all_transactions, 2022)\n        tax_2023 = calculate_tax(all_transactions, 2023)\n    \n        # Calculate effective tax rates\n        taxable_2021 = income_2021 - expenses_2021\n        taxable_2022 = income_2022 - expenses_2022\n        taxable_2023 = income_2023 - expenses_2023\n    \n        rate_2021 = tax_2021 / taxable_2021 * 100 if taxable_2021 > 0 else 0\n        rate_2022 = tax_2022 / taxable_2022 * 100 if taxable_2022 > 0 else 0\n        rate_2023 = tax_2023 / taxable_2023 * 100 if taxable_2023 > 0 else 0\n    \n        # Verify tax liability increases with income\n>       assert tax_2022 > tax_2021\nE       assert 0.0 > 0.0\n\ntests/freelancer/integration/test_year_over_year_mocks.py:346: AssertionError"}, "teardown": {"duration": 0.00014772778376936913, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends", "lineno": 352, "outcome": "failed", "keywords": ["test_project_profitability_trends", "TestYearOverYearComparison", "test_year_over_year_mocks.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013431906700134277, "outcome": "passed"}, "call": {"duration": 0.00037753675132989883, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 553, "message": "assert 60 < 0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_mocks.py", "lineno": 553, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_mocks.TestYearOverYearComparison object at 0x7fc860117c10>\n\n    def test_project_profitability_trends(self):\n        \"\"\"Test analyzing project profitability trends across multiple years.\"\"\"\n        # Create projects across multiple years with improving profitability\n    \n        # 2021 Projects (baseline profitability)\n        projects_2021 = [\n            # Project 1: 65% profit margin\n            {\n                \"id\": \"project-2021-1\",\n                \"transactions\": [\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2021, 3, 15),\n                        amount=10000.0,\n                        description=\"Project 2021-1 income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                        project_id=\"project-2021-1\",\n                    ),\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2021, 2, 10),\n                        amount=3500.0,\n                        description=\"Project 2021-1 expenses\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        category=ExpenseCategory.BUSINESS_SUPPLIES,\n                        business_use_percentage=100.0,\n                        project_id=\"project-2021-1\",\n                    ),\n                ]\n            },\n            # Project 2: 60% profit margin\n            {\n                \"id\": \"project-2021-2\",\n                \"transactions\": [\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2021, 8, 20),\n                        amount=15000.0,\n                        description=\"Project 2021-2 income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                        project_id=\"project-2021-2\",\n                    ),\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2021, 7, 15),\n                        amount=6000.0,\n                        description=\"Project 2021-2 expenses\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        category=ExpenseCategory.BUSINESS_SUPPLIES,\n                        business_use_percentage=100.0,\n                        project_id=\"project-2021-2\",\n                    ),\n                ]\n            },\n        ]\n    \n        # 2022 Projects (improved profitability)\n        projects_2022 = [\n            # Project 1: 70% profit margin\n            {\n                \"id\": \"project-2022-1\",\n                \"transactions\": [\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2022, 4, 10),\n                        amount=12000.0,\n                        description=\"Project 2022-1 income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                        project_id=\"project-2022-1\",\n                    ),\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2022, 3, 5),\n                        amount=3600.0,\n                        description=\"Project 2022-1 expenses\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        category=ExpenseCategory.BUSINESS_SUPPLIES,\n                        business_use_percentage=100.0,\n                        project_id=\"project-2022-1\",\n                    ),\n                ]\n            },\n            # Project 2: 72% profit margin\n            {\n                \"id\": \"project-2022-2\",\n                \"transactions\": [\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2022, 9, 15),\n                        amount=18000.0,\n                        description=\"Project 2022-2 income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                        project_id=\"project-2022-2\",\n                    ),\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2022, 8, 10),\n                        amount=5000.0,\n                        description=\"Project 2022-2 expenses\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        category=ExpenseCategory.BUSINESS_SUPPLIES,\n                        business_use_percentage=100.0,\n                        project_id=\"project-2022-2\",\n                    ),\n                ]\n            },\n        ]\n    \n        # 2023 Projects (further improved profitability)\n        projects_2023 = [\n            # Project 1: 75% profit margin\n            {\n                \"id\": \"project-2023-1\",\n                \"transactions\": [\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2023, 2, 20),\n                        amount=14000.0,\n                        description=\"Project 2023-1 income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                        project_id=\"project-2023-1\",\n                    ),\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2023, 1, 15),\n                        amount=3500.0,\n                        description=\"Project 2023-1 expenses\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        category=ExpenseCategory.BUSINESS_SUPPLIES,\n                        business_use_percentage=100.0,\n                        project_id=\"project-2023-1\",\n                    ),\n                ]\n            },\n            # Project 2: 78% profit margin\n            {\n                \"id\": \"project-2023-2\",\n                \"transactions\": [\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2023, 7, 10),\n                        amount=20000.0,\n                        description=\"Project 2023-2 income\",\n                        transaction_type=TransactionType.INCOME,\n                        account_id=\"checking123\",\n                        project_id=\"project-2023-2\",\n                    ),\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=datetime(2023, 6, 5),\n                        amount=4400.0,\n                        description=\"Project 2023-2 expenses\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        category=ExpenseCategory.BUSINESS_SUPPLIES,\n                        business_use_percentage=100.0,\n                        project_id=\"project-2023-2\",\n                    ),\n                ]\n            },\n        ]\n    \n        # Calculate profit margins by year\n        def calculate_profit_margin(projects):\n            all_transactions = []\n            for project in projects:\n                all_transactions.extend(project[\"transactions\"])\n    \n            income = sum(\n                t.amount\n                for t in all_transactions\n                if t.transaction_type == TransactionType.INCOME\n            )\n    \n            expenses = sum(\n                t.amount * (t.business_use_percentage / 100.0)\n                for t in all_transactions\n                if t.transaction_type == TransactionType.EXPENSE and t.business_use_percentage is not None\n            )\n    \n            profit = income - expenses\n            margin = (profit / income) * 100 if income > 0 else 0\n    \n            return margin\n    \n        margin_2021 = calculate_profit_margin(projects_2021)\n        margin_2022 = calculate_profit_margin(projects_2022)\n        margin_2023 = calculate_profit_margin(projects_2023)\n    \n        # Verify profit margins improve year over year\n>       assert 60 < margin_2021 < 65\nE       assert 60 < 0\n\ntests/freelancer/integration/test_year_over_year_mocks.py:553: AssertionError"}, "teardown": {"duration": 0.00015310710296034813, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years", "lineno": 28, "outcome": "passed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00013888021931052208, "outcome": "passed"}, "call": {"duration": 0.00028242077678442, "outcome": "passed"}, "teardown": {"duration": 0.00010608695447444916, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years", "lineno": 70, "outcome": "failed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011780019849538803, "outcome": "passed"}, "call": {"duration": 0.0002070288173854351, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_simple.py", "lineno": 135, "message": "TypeError: unsupported operand type(s) for *: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_simple.py", "lineno": 134, "message": ""}, {"path": "tests/freelancer/integration/test_year_over_year_simple.py", "lineno": 135, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_simple.TestYearOverYearSimple object at 0x7fc860117fa0>\n\n    def test_expense_comparison_across_years(self):\n        \"\"\"Test comparing expense patterns across multiple years.\"\"\"\n        # Create sample transactions\n        transactions = []\n    \n        # 2021 expenses\n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2021, 6, 15),\n            amount=1000.0,\n            description=\"Software expenses 2021\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=100.0,\n        ))\n    \n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2021, 7, 15),\n            amount=2000.0,\n            description=\"Personal expenses 2021\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        ))\n    \n        # 2022 expenses (higher)\n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 6, 15),\n            amount=1500.0,\n            description=\"Software expenses 2022\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=100.0,\n        ))\n    \n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 7, 15),\n            amount=2500.0,\n            description=\"Personal expenses 2022\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        ))\n    \n        # Split by year\n        expenses_2021 = [tx for tx in transactions if tx.date.year == 2021]\n        expenses_2022 = [tx for tx in transactions if tx.date.year == 2022]\n    \n        # Calculate totals\n        total_2021 = sum(tx.amount for tx in expenses_2021)\n        total_2022 = sum(tx.amount for tx in expenses_2022)\n    \n        # Verify expenses increased\n        assert total_2022 > total_2021\n    \n        # Calculate business expenses\n>       business_2021 = sum(\n            tx.amount * (tx.business_use_percentage / 100.0)\n            for tx in expenses_2021\n            if tx.category != ExpenseCategory.PERSONAL\n        )\n\ntests/freelancer/integration/test_year_over_year_simple.py:134: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n.0 = <list_iterator object at 0x7fc85bbb78b0>\n\n    business_2021 = sum(\n>       tx.amount * (tx.business_use_percentage / 100.0)\n        for tx in expenses_2021\n        if tx.category != ExpenseCategory.PERSONAL\n    )\nE   TypeError: unsupported operand type(s) for *: 'decimal.Decimal' and 'float'\n\ntests/freelancer/integration/test_year_over_year_simple.py:135: TypeError"}, "teardown": {"duration": 0.00015418929979205132, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years", "lineno": 148, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011909473687410355, "outcome": "passed"}, "call": {"duration": 0.00016454514116048813, "outcome": "passed"}, "teardown": {"duration": 0.00011411774903535843, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years", "lineno": 170, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearSimple", "test_year_over_year_simple.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010984670370817184, "outcome": "passed"}, "call": {"duration": 0.00014125090092420578, "outcome": "passed"}, "teardown": {"duration": 0.00010127387940883636, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years", "lineno": 29, "outcome": "failed", "keywords": ["test_income_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012057693675160408, "outcome": "passed"}, "call": {"duration": 0.0003686537966132164, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_simplified.py", "lineno": 86, "message": "assert 0 > 0"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_simplified.py", "lineno": 86, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_simplified.TestYearOverYearSimplified object at 0x7fc860154700>\n\n    def test_income_comparison_across_years(self):\n        \"\"\"Test comparing income patterns across multiple years.\"\"\"\n        income_manager = IncomeManager()\n    \n        # Create income transactions for two years\n        transactions = []\n    \n        # 2021 income (lower)\n        for month in range(1, 13):\n            if month in [1, 3, 5, 7, 9, 11]:  # Bi-monthly income\n                amount = 3000.0\n                tx = Transaction(\n                    id=uuid.uuid4(),\n                    date=datetime(2021, month, 15),\n                    amount=amount,\n                    description=f\"Income for month {month}\",\n                    transaction_type=TransactionType.INCOME,\n                    account_id=\"checking123\",\n                )\n                transactions.append(tx)\n    \n        # 2022 income (higher)\n        for month in range(1, 13):\n            if month in [1, 3, 5, 7, 9, 11]:  # Same pattern but higher amount\n                amount = 4000.0\n                tx = Transaction(\n                    id=uuid.uuid4(),\n                    date=datetime(2022, month, 15),\n                    amount=amount,\n                    description=f\"Income for month {month}\",\n                    transaction_type=TransactionType.INCOME,\n                    account_id=\"checking123\",\n                )\n                transactions.append(tx)\n    \n        # Process transactions by year\n        income_2021 = [tx for tx in transactions if tx.date.year == 2021]\n        income_2022 = [tx for tx in transactions if tx.date.year == 2022]\n    \n        # Calculate income for each year\n        monthly_income_2021 = income_manager.calculate_monthly_income(\n            income_2021,\n            start_date=datetime(2021, 1, 1),\n            end_date=datetime(2021, 12, 31)\n        )\n        monthly_income_2022 = income_manager.calculate_monthly_income(\n            income_2022,\n            start_date=datetime(2022, 1, 1),\n            end_date=datetime(2022, 12, 31)\n        )\n    \n        # Calculate totals\n        total_2021 = sum(monthly_income_2021.values())\n        total_2022 = sum(monthly_income_2022.values())\n    \n        # Verify income increased\n>       assert total_2022 > total_2021\nE       assert 0 > 0\n\ntests/freelancer/integration/test_year_over_year_simplified.py:86: AssertionError"}, "teardown": {"duration": 0.00014516012743115425, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years", "lineno": 91, "outcome": "failed", "keywords": ["test_expense_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011966517195105553, "outcome": "passed"}, "call": {"duration": 0.00037217605859041214, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/integration/test_year_over_year_simplified.py", "lineno": 167, "message": "assert 0.0 > 0.0\n +  where 0.0 = ExpenseSummary(period_start=datetime.datetime(2022, 1, 1, 0, 0), period_end=datetime.datetime(2022, 12, 31, 0, 0), tot...expenses=0.0, personal_expenses=0.0, by_category={}, generation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 982735)).total_expenses\n +  and   0.0 = ExpenseSummary(period_start=datetime.datetime(2021, 1, 1, 0, 0), period_end=datetime.datetime(2021, 12, 31, 0, 0), tot...expenses=0.0, personal_expenses=0.0, by_category={}, generation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 982727)).total_expenses"}, "traceback": [{"path": "tests/freelancer/integration/test_year_over_year_simplified.py", "lineno": 167, "message": "AssertionError"}], "longrepr": "self = <tests.freelancer.integration.test_year_over_year_simplified.TestYearOverYearSimplified object at 0x7fc860154880>\n\n    def test_expense_comparison_across_years(self):\n        \"\"\"Test comparing expense patterns across multiple years.\"\"\"\n        categorizer = ExpenseCategorizer()\n    \n        # Create expense transactions for two years\n        transactions = []\n    \n        # 2021 expenses\n        # Business expenses\n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2021, 6, 15),\n            amount=1000.0,\n            description=\"Software expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=100.0,\n        ))\n    \n        # Personal expenses\n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2021, 6, 20),\n            amount=2000.0,\n            description=\"Personal expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        ))\n    \n        # 2022 expenses (higher)\n        # Business expenses\n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 6, 15),\n            amount=1500.0,\n            description=\"Software expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.SOFTWARE,\n            business_use_percentage=100.0,\n        ))\n    \n        # Personal expenses\n        transactions.append(Transaction(\n            id=uuid.uuid4(),\n            date=datetime(2022, 6, 20),\n            amount=2200.0,\n            description=\"Personal expenses\",\n            transaction_type=TransactionType.EXPENSE,\n            account_id=\"checking123\",\n            category=ExpenseCategory.PERSONAL,\n            business_use_percentage=0.0,\n        ))\n    \n        # Process by year\n        expenses_2021 = [tx for tx in transactions if tx.date.year == 2021]\n        expenses_2022 = [tx for tx in transactions if tx.date.year == 2022]\n    \n        # Generate expense summaries\n        summary_2021 = categorizer.generate_expense_summary(\n            expenses_2021,\n            start_date=datetime(2021, 1, 1),\n            end_date=datetime(2021, 12, 31)\n        )\n    \n        summary_2022 = categorizer.generate_expense_summary(\n            expenses_2022,\n            start_date=datetime(2022, 1, 1),\n            end_date=datetime(2022, 12, 31)\n        )\n    \n        # Verify total expenses increased\n>       assert summary_2022.total_expenses > summary_2021.total_expenses\nE       assert 0.0 > 0.0\nE        +  where 0.0 = ExpenseSummary(period_start=datetime.datetime(2022, 1, 1, 0, 0), period_end=datetime.datetime(2022, 12, 31, 0, 0), tot...expenses=0.0, personal_expenses=0.0, by_category={}, generation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 982735)).total_expenses\nE        +  and   0.0 = ExpenseSummary(period_start=datetime.datetime(2021, 1, 1, 0, 0), period_end=datetime.datetime(2021, 12, 31, 0, 0), tot...expenses=0.0, personal_expenses=0.0, by_category={}, generation_date=datetime.datetime(2025, 6, 16, 4, 34, 53, 982727)).total_expenses\n\ntests/freelancer/integration/test_year_over_year_simplified.py:167: AssertionError"}, "teardown": {"duration": 0.0001459219492971897, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years", "lineno": 175, "outcome": "passed", "keywords": ["test_tax_comparison_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012501515448093414, "outcome": "passed"}, "call": {"duration": 0.00013136724010109901, "outcome": "passed"}, "teardown": {"duration": 0.00010273000225424767, "outcome": "passed"}}, {"nodeid": "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years", "lineno": 205, "outcome": "passed", "keywords": ["test_project_profitability_across_years", "TestYearOverYearSimplified", "test_year_over_year_simplified.py", "integration", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011719716712832451, "outcome": "passed"}, "call": {"duration": 0.00017387699335813522, "outcome": "passed"}, "teardown": {"duration": 0.00010667601600289345, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init", "lineno": 25, "outcome": "failed", "keywords": ["test_init", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003250180743634701, "outcome": "passed"}, "call": {"duration": 0.00015714112669229507, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/project/test_profitability_analyzer.py", "lineno": 29, "message": "AttributeError: 'FreelancerProjectProfiler' object has no attribute '_profitability_cache'"}, "traceback": [{"path": "tests/freelancer/project/test_profitability_analyzer.py", "lineno": 29, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.project.test_profitability_analyzer.TestProjectProfiler object at 0x7fc8601557e0>\n\n    def test_init(self):\n        \"\"\"Test initialization of the project profiler.\"\"\"\n        profiler = ProjectProfiler()\n>       assert profiler._profitability_cache == {}\nE       AttributeError: 'FreelancerProjectProfiler' object has no attribute '_profitability_cache'\n\ntests/freelancer/project/test_profitability_analyzer.py:29: AttributeError"}, "teardown": {"duration": 0.00015477603301405907, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability", "lineno": 30, "outcome": "failed", "keywords": ["test_analyze_project_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0027388366870582104, "outcome": "passed"}, "call": {"duration": 0.0013666460290551186, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/common/core/utils/financial_calculations.py", "lineno": 106, "message": "TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'"}, "traceback": [{"path": "tests/freelancer/project/test_profitability_analyzer.py", "lineno": 40, "message": ""}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 164, "message": "in analyze_project_profitability"}, {"path": "common/core/utils/financial_calculations.py", "lineno": 106, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.project.test_profitability_analyzer.TestProjectProfiler object at 0x7fc860155a20>\nsample_projects = [Project(id='project1', name='Website Redesign', client_id='client1', start_date=datetime.datetime(2022, 1, 1, 0, 0), ... 21, 0, 0), status='completed', hourly_rate=None, fixed_price=1000.0, estimated_hours=10.0, description=None, tags=[])]\nsample_time_entries = [TimeEntry(id=UUID('a18c1ca0-508b-44e4-9f8e-1bfc9525cb45'), project_id='project1', start_time=datetime.datetime(2022, ....datetime(2022, 1, 16, 13, 0), duration_minutes=240.0, description='Website design work', billable=True, tags=[]), ...]\nsample_transactions = [BaseTransaction(id='a1e32ef4-a09f-4d54-8dd3-4c392ad25adc', date=2022-01-15 00:00:00, amount=2500, description='Client...da-613ad6bf7db5', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\nsample_invoices = [Invoice(id='invproject1-1', client_id='client1', project_id='project1', issue_date=datetime.datetime(2022, 1, 23, 12,...keting Campaign', line_items=[{'description': 'Payment for 50.0 hours on Marketing Campaign', 'amount': 3750.0}]), ...]\n\n    def test_analyze_project_profitability(\n        self, sample_projects, sample_time_entries, sample_transactions, sample_invoices\n    ):\n        \"\"\"Test project profitability analysis for a single project.\"\"\"\n        profiler = ProjectProfiler()\n    \n        # Test each project\n        for project in sample_projects:\n            # Run analysis\n>           analysis = profiler.analyze_project_profitability(\n                project, sample_time_entries, sample_transactions, sample_invoices\n            )\n\ntests/freelancer/project/test_profitability_analyzer.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/project/profitability_analyzer_migrated.py:164: in analyze_project_profitability\n    roi = FinancialCalculations.calculate_roi(total_profit, max(total_expenses, min_expenses))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngain = 0, cost = 0.01\n\n    @staticmethod\n    def calculate_roi(gain: Decimal, cost: Decimal) -> Decimal:\n        \"\"\"Calculate return on investment as percentage.\"\"\"\n        if cost == 0:\n            return Decimal('0')\n    \n>       roi = ((gain - cost) / cost) * Decimal('100')\nE       TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\n\ncommon/core/utils/financial_calculations.py:106: TypeError"}, "teardown": {"duration": 0.0002773730084300041, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability", "lineno": 63, "outcome": "failed", "keywords": ["test_analyze_client_profitability", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00264026690274477, "outcome": "passed"}, "call": {"duration": 0.002432105131447315, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/common/core/utils/financial_calculations.py", "lineno": 106, "message": "TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'"}, "traceback": [{"path": "tests/freelancer/project/test_profitability_analyzer.py", "lineno": 78, "message": ""}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 267, "message": "in analyze_client_profitability"}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 164, "message": "in analyze_project_profitability"}, {"path": "common/core/utils/financial_calculations.py", "lineno": 106, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.project.test_profitability_analyzer.TestProjectProfiler object at 0x7fc860155cc0>\nsample_clients = [Client(id='client1', name='TechCorp Inc.', contact_email='contact@techcorp.com', contact_phone=None, address=None, no...eting Solutions', contact_email='info@marketsolutions.com', contact_phone=None, address=None, notes=None, active=True)]\nsample_projects = [Project(id='project1', name='Website Redesign', client_id='client1', start_date=datetime.datetime(2022, 1, 1, 0, 0), ... 21, 0, 0), status='completed', hourly_rate=None, fixed_price=1000.0, estimated_hours=10.0, description=None, tags=[])]\nsample_time_entries = [TimeEntry(id=UUID('2b61d744-3866-4df8-a453-fdd8345417b6'), project_id='project1', start_time=datetime.datetime(2022, ....datetime(2022, 1, 16, 13, 0), duration_minutes=240.0, description='Website design work', billable=True, tags=[]), ...]\nsample_transactions = [BaseTransaction(id='98c5ff85-fe33-43ad-9d3b-30e52bdaa04f', date=2022-01-15 00:00:00, amount=2500, description='Client...4c-c51580166b4d', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\nsample_invoices = [Invoice(id='invproject1-1', client_id='client1', project_id='project1', issue_date=datetime.datetime(2022, 1, 23, 12,...keting Campaign', line_items=[{'description': 'Payment for 50.0 hours on Marketing Campaign', 'amount': 3750.0}]), ...]\n\n    def test_analyze_client_profitability(\n        self,\n        sample_clients,\n        sample_projects,\n        sample_time_entries,\n        sample_transactions,\n        sample_invoices,\n    ):\n        \"\"\"Test client profitability analysis across multiple projects.\"\"\"\n        profiler = ProjectProfiler()\n    \n        # Test each client\n        for client in sample_clients:\n            # Run analysis\n>           analysis = profiler.analyze_client_profitability(\n                client,\n                sample_projects,\n                sample_time_entries,\n                sample_transactions,\n                sample_invoices,\n            )\n\ntests/freelancer/project/test_profitability_analyzer.py:78: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/project/profitability_analyzer_migrated.py:267: in analyze_client_profitability\n    analysis = self.analyze_project_profitability(\npersonal_finance_tracker/project/profitability_analyzer_migrated.py:164: in analyze_project_profitability\n    roi = FinancialCalculations.calculate_roi(total_profit, max(total_expenses, min_expenses))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngain = 0, cost = 0.01\n\n    @staticmethod\n    def calculate_roi(gain: Decimal, cost: Decimal) -> Decimal:\n        \"\"\"Calculate return on investment as percentage.\"\"\"\n        if cost == 0:\n            return Decimal('0')\n    \n>       roi = ((gain - cost) / cost) * Decimal('100')\nE       TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\n\ncommon/core/utils/financial_calculations.py:106: TypeError"}, "teardown": {"duration": 0.00029746163636446, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects", "lineno": 100, "outcome": "failed", "keywords": ["test_analyze_all_projects", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002572509925812483, "outcome": "passed"}, "call": {"duration": 0.001375267282128334, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/common/core/utils/financial_calculations.py", "lineno": 106, "message": "TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'"}, "traceback": [{"path": "tests/freelancer/project/test_profitability_analyzer.py", "lineno": 109, "message": ""}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 346, "message": "in analyze_all_projects"}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 164, "message": "in analyze_project_profitability"}, {"path": "common/core/utils/financial_calculations.py", "lineno": 106, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.project.test_profitability_analyzer.TestProjectProfiler object at 0x7fc860155b10>\nsample_projects = [Project(id='project1', name='Website Redesign', client_id='client1', start_date=datetime.datetime(2022, 1, 1, 0, 0), ... 21, 0, 0), status='completed', hourly_rate=None, fixed_price=1000.0, estimated_hours=10.0, description=None, tags=[])]\nsample_time_entries = [TimeEntry(id=UUID('593b44c5-4c15-49f2-9f11-bbb3160a28ba'), project_id='project1', start_time=datetime.datetime(2022, ....datetime(2022, 1, 16, 13, 0), duration_minutes=240.0, description='Website design work', billable=True, tags=[]), ...]\nsample_transactions = [BaseTransaction(id='52ccb881-9b08-4912-a0a6-7b713bcc803c', date=2022-01-15 00:00:00, amount=2500, description='Client...30-f3bce5863be8', date=2022-07-15 00:00:00, amount=5000, description='Client payment for Project 6', type=income), ...]\nsample_invoices = [Invoice(id='invproject1-1', client_id='client1', project_id='project1', issue_date=datetime.datetime(2022, 1, 23, 12,...keting Campaign', line_items=[{'description': 'Payment for 50.0 hours on Marketing Campaign', 'amount': 3750.0}]), ...]\n\n    def test_analyze_all_projects(\n        self, sample_projects, sample_time_entries, sample_transactions, sample_invoices\n    ):\n        \"\"\"Test analysis of all projects at once.\"\"\"\n        profiler = ProjectProfiler()\n    \n        # Run analysis for all projects\n        start_time = time.time()\n>       all_projects = profiler.analyze_all_projects(\n            sample_projects, sample_time_entries, sample_transactions, sample_invoices\n        )\n\ntests/freelancer/project/test_profitability_analyzer.py:109: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/project/profitability_analyzer_migrated.py:346: in analyze_all_projects\n    analysis = self.analyze_project_profitability(\npersonal_finance_tracker/project/profitability_analyzer_migrated.py:164: in analyze_project_profitability\n    roi = FinancialCalculations.calculate_roi(total_profit, max(total_expenses, min_expenses))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ngain = 0, cost = 0.01\n\n    @staticmethod\n    def calculate_roi(gain: Decimal, cost: Decimal) -> Decimal:\n        \"\"\"Calculate return on investment as percentage.\"\"\"\n        if cost == 0:\n            return Decimal('0')\n    \n>       roi = ((gain - cost) / cost) * Decimal('100')\nE       TypeError: unsupported operand type(s) for *: 'float' and 'decimal.Decimal'\n\ncommon/core/utils/financial_calculations.py:106: TypeError"}, "teardown": {"duration": 0.00026685697957873344, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis", "lineno": 120, "outcome": "passed", "keywords": ["test_generate_trend_analysis", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.002588418312370777, "outcome": "passed"}, "call": {"duration": 0.03352188738062978, "outcome": "passed"}, "teardown": {"duration": 0.00024412665516138077, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry", "lineno": 171, "outcome": "passed", "keywords": ["test_record_time_entry", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012969225645065308, "outcome": "passed"}, "call": {"duration": 0.00017686886712908745, "outcome": "passed"}, "teardown": {"duration": 0.00010925205424427986, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense", "lineno": 191, "outcome": "passed", "keywords": ["test_allocate_expense", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001089358702301979, "outcome": "passed"}, "call": {"duration": 0.00017773034051060677, "outcome": "passed"}, "teardown": {"duration": 0.0001058247871696949, "outcome": "passed"}}, {"nodeid": "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set", "lineno": 214, "outcome": "failed", "keywords": ["test_analyze_large_project_set", "TestProjectProfiler", "test_profitability_analyzer.py", "project", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001124911941587925, "outcome": "passed"}, "call": {"duration": 0.05294359102845192, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 161, "message": "TypeError: unsupported operand type(s) for /: 'decimal.Decimal' and 'float'"}, "traceback": [{"path": "tests/freelancer/project/test_profitability_analyzer.py", "lineno": 311, "message": ""}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 346, "message": "in analyze_all_projects"}, {"path": "personal_finance_tracker/project/profitability_analyzer_migrated.py", "lineno": 161, "message": "TypeError"}], "longrepr": "self = <tests.freelancer.project.test_profitability_analyzer.TestProjectProfiler object at 0x7fc860155f90>\n\n    def test_analyze_large_project_set(self):\n        \"\"\"Test performance with a large set of projects (100+).\"\"\"\n        profiler = ProjectProfiler()\n    \n        # Generate a large set of projects\n        num_projects = 105  # Slightly over the 100 requirement\n        projects = []\n        time_entries = []\n        transactions = []\n        invoices = []\n    \n        # Base date for test data\n        base_date = datetime(2022, 1, 1)\n    \n        for i in range(num_projects):\n            # Create project\n            project_id = f\"large_project_{i}\"\n            client_id = f\"client_{i % 10}\"  # 10 clients\n    \n            start_date = base_date + timedelta(days=i % 30)\n            end_date = start_date + timedelta(days=30) if i % 3 == 0 else None\n            status = \"completed\" if end_date else \"active\"\n    \n            project = Project(\n                id=project_id,\n                name=f\"Project {i}\",\n                client_id=client_id,\n                start_date=start_date,\n                end_date=end_date,\n                status=status,\n                hourly_rate=75.0 + (i % 5) * 10,  # Vary hourly rates\n                estimated_hours=20.0 + (i % 8) * 5,  # Vary estimated hours\n            )\n            projects.append(project)\n    \n            # Add some time entries\n            hours = 15 + (i % 10) * 2  # Different hours per project\n            for j in range(int(hours)):\n                entry_date = start_date + timedelta(days=j)\n                time_entries.append(\n                    TimeEntry(\n                        id=uuid.uuid4(),\n                        project_id=project_id,\n                        start_time=datetime.combine(entry_date, datetime.min.time())\n                        + timedelta(hours=9),\n                        end_time=datetime.combine(entry_date, datetime.min.time())\n                        + timedelta(hours=10),\n                        description=f\"Work on project {i}\",\n                    )\n                )\n    \n            # Add some expenses\n            expense_count = 1 + i % 3\n            for j in range(expense_count):\n                transactions.append(\n                    Transaction(\n                        id=uuid.uuid4(),\n                        date=start_date + timedelta(days=j * 5),\n                        amount=50.0 + j * 20,\n                        description=f\"Expense for project {i}\",\n                        transaction_type=TransactionType.EXPENSE,\n                        account_id=\"checking123\",\n                        project_id=project_id,\n                    )\n                )\n    \n            # Add an invoice\n            invoice_amount = project.hourly_rate * hours\n            invoice_date = start_date + timedelta(days=15)\n    \n            from personal_finance_tracker.models.common import Invoice\n    \n            invoices.append(\n                Invoice(\n                    id=f\"inv_{project_id}\",\n                    client_id=client_id,\n                    project_id=project_id,\n                    issue_date=invoice_date,\n                    due_date=invoice_date + timedelta(days=15),\n                    amount=invoice_amount,\n                    status=\"paid\" if i % 4 != 0 else \"sent\",\n                    payment_date=(invoice_date + timedelta(days=10))\n                    if i % 4 != 0\n                    else None,\n                    description=f\"Invoice for Project {i}\",\n                    line_items=[\n                        {\n                            \"description\": f\"Work on Project {i}\",\n                            \"amount\": invoice_amount,\n                        }\n                    ],\n                )\n            )\n    \n        # Test performance\n        start_time = time.time()\n>       results = profiler.analyze_all_projects(\n            projects, time_entries, transactions, invoices\n        )\n\ntests/freelancer/project/test_profitability_analyzer.py:311: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npersonal_finance_tracker/project/profitability_analyzer_migrated.py:346: in analyze_all_projects\n    analysis = self.analyze_project_profitability(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = FreelancerProjectProfiler(caching=True, performance_tracking=True)\nproject = Project(id='large_project_0', name='Project 0', client_id='client_0', start_date=datetime.datetime(2022, 1, 1, 0, 0), ... 1, 31, 0, 0), status='completed', hourly_rate=75.0, fixed_price=None, estimated_hours=20.0, description=None, tags=[])\ntime_entries = [TimeEntry(id=UUID('bae8e63d-861c-410b-842a-4fc6275be0b0'), project_id='large_project_0', start_time=datetime.datetime...time.datetime(2022, 1, 6, 10, 0), duration_minutes=60.0, description='Work on project 0', billable=True, tags=[]), ...]\ntransactions = [BaseTransaction(id='2bcaffc3-2445-4410-813c-37e8d240d11b', date=2022-01-01 00:00:00, amount=50.0, description='Expens...6e8-8891-541bd11dc158', date=2022-01-13 00:00:00, amount=90.0, description='Expense for project 2', type=expense), ...]\ninvoices = [Invoice(id='inv_large_project_0', client_id='client_0', project_id='large_project_0', issue_date=datetime.datetime(20... 0, 0), description='Invoice for Project 5', line_items=[{'description': 'Work on Project 5', 'amount': 1875.0}]), ...]\nforce_recalculation = False, kwargs = {}\ncache_key = 'project_large_project_0_-4003964685672575314', cached_result = None\nproject_time_entries = [TimeEntry(id=UUID('bae8e63d-861c-410b-842a-4fc6275be0b0'), project_id='large_project_0', start_time=datetime.datetime...time.datetime(2022, 1, 6, 10, 0), duration_minutes=60.0, description='Work on project 0', billable=True, tags=[]), ...]\ntotal_hours = 15.0\nproject_invoices = [Invoice(id='inv_large_project_0', client_id='client_0', project_id='large_project_0', issue_date=datetime.datetime(20...t_date=None, description='Invoice for Project 0', line_items=[{'description': 'Work on Project 0', 'amount': 1125.0}])]\npaid_invoices = [], total_revenue = 0\n\n    def analyze_project_profitability(\n        self,\n        project: Project,\n        time_entries: List[TimeEntry],\n        transactions: List[Transaction],\n        invoices: List[Invoice],\n        force_recalculation: bool = False,\n        **kwargs\n    ) -> ProjectProfitability:\n        \"\"\"\n        Analyze the profitability of a single project with caching.\n    \n        Args:\n            project: Project to analyze\n            time_entries: Time entries associated with the project\n            transactions: Transactions associated with the project\n            invoices: Invoices associated with the project\n            force_recalculation: Whether to force recalculation\n    \n        Returns:\n            ProjectProfitability analysis result\n        \"\"\"\n        # Generate cache key\n        cache_key = f\"project_{project.id}_{hash(str(time_entries + transactions + invoices))}\"\n    \n        # Check cache unless forced recalculation\n        if not force_recalculation:\n            cached_result = self.get_cached_result(cache_key)\n            if cached_result is not None:\n                return cached_result\n    \n        with self.measure_performance(\"single_project_analysis\"):\n            # Filter to entries for this project\n            project_time_entries = [e for e in time_entries if e.project_id == project.id]\n    \n            # Calculate total hours\n            total_hours = sum(\n                entry.duration_minutes / 60\n                for entry in project_time_entries\n                if entry.duration_minutes is not None\n            )\n    \n            # Calculate total revenue from invoices\n            project_invoices = [i for i in invoices if i.project_id == project.id]\n            paid_invoices = [i for i in project_invoices if i.status == \"paid\"]\n            total_revenue = sum(invoice.amount for invoice in paid_invoices)\n    \n            # Calculate total expenses\n            project_expenses = [\n                t\n                for t in transactions\n                if (\n                    t.transaction_type == TransactionType.EXPENSE\n                    and t.project_id == project.id\n                )\n            ]\n            total_expenses = sum(t.amount for t in project_expenses)\n    \n            # Calculate profitability metrics using common library\n            total_profit = total_revenue - total_expenses\n    \n            # Use configuration for minimum values to avoid division by zero\n            min_hours = self.get_config_value(\"minimum_hours_for_rate_calculation\", 0.01)\n            min_revenue = self.get_config_value(\"minimum_revenue_for_margin_calculation\", 0.01)\n            min_expenses = self.get_config_value(\"minimum_expenses_for_roi_calculation\", 0.01)\n    \n            effective_hourly_rate = total_revenue / max(total_hours, min_hours)\n>           profit_margin = 100 * total_profit / max(total_revenue, min_revenue)\nE           TypeError: unsupported operand type(s) for /: 'decimal.Decimal' and 'float'\n\npersonal_finance_tracker/project/profitability_analyzer_migrated.py:161: TypeError"}, "teardown": {"duration": 0.00015711411833763123, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init", "lineno": 30, "outcome": "failed", "keywords": ["test_init", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003144838847219944, "outcome": "passed"}, "call": {"duration": 0.00016771303489804268, "outcome": "failed", "crash": {"path": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/tests/freelancer/projection/test_financial_projector.py", "lineno": 34, "message": "AttributeError: 'FreelancerFinancialProjector' object has no attribute '_projection_cache'"}, "traceback": [{"path": "tests/freelancer/projection/test_financial_projector.py", "lineno": 34, "message": "AttributeError"}], "longrepr": "self = <tests.freelancer.projection.test_financial_projector.TestFinancialProjector object at 0x7fc860156b90>\n\n    def test_init(self):\n        \"\"\"Test initialization of the financial projector.\"\"\"\n        projector = FinancialProjector()\n>       assert projector._projection_cache == {}\nE       AttributeError: 'FreelancerFinancialProjector' object has no attribute '_projection_cache'\n\ntests/freelancer/projection/test_financial_projector.py:34: AttributeError"}, "teardown": {"duration": 0.00014910707250237465, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow", "lineno": 35, "outcome": "passed", "keywords": ["test_project_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00012049078941345215, "outcome": "passed"}, "call": {"duration": 0.00040141399949789047, "outcome": "passed"}, "teardown": {"duration": 0.00011268118396401405, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios", "lineno": 145, "outcome": "passed", "keywords": ["test_project_cash_flow_different_scenarios", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011068303138017654, "outcome": "passed"}, "call": {"duration": 0.0005916920490562916, "outcome": "passed"}, "teardown": {"duration": 0.00011014891788363457, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple", "lineno": 217, "outcome": "passed", "keywords": ["test_calculate_runway_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011051911860704422, "outcome": "passed"}, "call": {"duration": 0.00020392891019582748, "outcome": "passed"}, "teardown": {"duration": 0.00010519009083509445, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario", "lineno": 236, "outcome": "passed", "keywords": ["test_create_what_if_scenario", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001056860201060772, "outcome": "passed"}, "call": {"duration": 0.00019445596262812614, "outcome": "passed"}, "teardown": {"duration": 0.00010335631668567657, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation", "lineno": 279, "outcome": "passed", "keywords": ["test_create_what_if_scenario_with_evaluation", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010572001338005066, "outcome": "passed"}, "call": {"duration": 0.00016238493844866753, "outcome": "passed"}, "teardown": {"duration": 0.00010753609240055084, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple", "lineno": 309, "outcome": "passed", "keywords": ["test_assess_emergency_fund_simple", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010695913806557655, "outcome": "passed"}, "call": {"duration": 0.00017746491357684135, "outcome": "passed"}, "teardown": {"duration": 0.00010449718683958054, "outcome": "passed"}}, {"nodeid": "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow", "lineno": 332, "outcome": "passed", "keywords": ["test_negative_cash_flow", "TestFinancialProjector", "test_financial_projector.py", "projection", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001095551997423172, "outcome": "passed"}, "call": {"duration": 0.00034712720662355423, "outcome": "passed"}, "teardown": {"duration": 0.00010904157534241676, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init", "lineno": 19, "outcome": "passed", "keywords": ["test_init", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0003063082695007324, "outcome": "passed"}, "call": {"duration": 0.0001975102350115776, "outcome": "passed"}, "teardown": {"duration": 0.00011723022907972336, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters", "lineno": 29, "outcome": "passed", "keywords": ["test_calculate_tax_quarters", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011010514572262764, "outcome": "passed"}, "call": {"duration": 0.00019229529425501823, "outcome": "passed"}, "teardown": {"duration": 0.00010209297761321068, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter", "lineno": 60, "outcome": "passed", "keywords": ["test_get_current_quarter", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010925205424427986, "outcome": "passed"}, "call": {"duration": 0.00018432922661304474, "outcome": "passed"}, "teardown": {"duration": 0.00010340986773371696, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets", "lineno": 71, "outcome": "passed", "keywords": ["test_tax_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.0001159808598458767, "outcome": "passed"}, "call": {"duration": 0.00018878700211644173, "outcome": "passed"}, "teardown": {"duration": 0.00010113883763551712, "outcome": "passed"}}, {"nodeid": "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets", "lineno": 114, "outcome": "passed", "keywords": ["test_load_default_brackets", "TestTaxManagerSimple", "test_tax_manager_simple.py", "tax", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00010540010407567024, "outcome": "passed"}, "call": {"duration": 0.0001811552792787552, "outcome": "passed"}, "teardown": {"duration": 0.0001047053374350071, "outcome": "passed"}}, {"nodeid": "tests/freelancer/test_main.py::test_main", "lineno": 3, "outcome": "passed", "keywords": ["test_main", "test_main.py", "freelancer", "tests", "unified", ""], "setup": {"duration": 0.00011785700917243958, "outcome": "passed"}, "call": {"duration": 0.00013305805623531342, "outcome": "passed"}, "teardown": {"duration": 0.00010254699736833572, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria", "lineno": 15, "outcome": "passed", "keywords": ["test_create_prioritized_ethical_criteria", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00040460005402565, "outcome": "passed"}, "call": {"duration": 0.0002656816504895687, "outcome": "passed"}, "teardown": {"duration": 0.00010803528130054474, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey", "lineno": 153, "outcome": "passed", "keywords": ["test_criteria_from_user_survey", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001097298227250576, "outcome": "passed"}, "call": {"duration": 0.00021435599774122238, "outcome": "passed"}, "teardown": {"duration": 0.0001005181111395359, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria", "lineno": 263, "outcome": "passed", "keywords": ["test_serialize_and_load_criteria", "TestEthicalCriteriaCustomization", "test_ethical_criteria_customization.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010493304580450058, "outcome": "passed"}, "call": {"duration": 0.00025923969224095345, "outcome": "passed"}, "teardown": {"duration": 0.00011374522000551224, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria", "lineno": 16, "outcome": "passed", "keywords": ["test_create_default_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012032687664031982, "outcome": "passed"}, "call": {"duration": 0.0002657826989889145, "outcome": "passed"}, "teardown": {"duration": 0.00010675890371203423, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener", "lineno": 40, "outcome": "passed", "keywords": ["test_initialize_screener", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017576199024915695, "outcome": "passed"}, "call": {"duration": 0.00021954625844955444, "outcome": "passed"}, "teardown": {"duration": 0.00012455694377422333, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing", "lineno": 46, "outcome": "passed", "keywords": ["test_screen_investment_passing", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021771667525172234, "outcome": "passed"}, "call": {"duration": 0.00046645570546388626, "outcome": "passed"}, "teardown": {"duration": 0.00014876434579491615, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing", "lineno": 89, "outcome": "passed", "keywords": ["test_screen_investment_failing", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002354951575398445, "outcome": "passed"}, "call": {"duration": 0.000357563141733408, "outcome": "passed"}, "teardown": {"duration": 0.00015060510486364365, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions", "lineno": 133, "outcome": "passed", "keywords": ["test_screen_investment_with_exclusions", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00022017210721969604, "outcome": "passed"}, "call": {"duration": 0.0003482038155198097, "outcome": "passed"}, "teardown": {"duration": 0.00014076894149184227, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions", "lineno": 178, "outcome": "passed", "keywords": ["test_screen_investment_with_inclusions", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002213488332927227, "outcome": "passed"}, "call": {"duration": 0.00037884199991822243, "outcome": "passed"}, "teardown": {"duration": 0.00014076102524995804, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch", "lineno": 222, "outcome": "passed", "keywords": ["test_screen_investments_batch", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002123108133673668, "outcome": "passed"}, "call": {"duration": 0.0008601103909313679, "outcome": "passed", "stdout": "Screened 5 investments in 0.00 seconds\n"}, "teardown": {"duration": 0.00016635097563266754, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria", "lineno": 258, "outcome": "passed", "keywords": ["test_evaluate_environmental_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002300618216395378, "outcome": "passed"}, "call": {"duration": 0.00021904893219470978, "outcome": "passed"}, "teardown": {"duration": 0.00013648485764861107, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria", "lineno": 300, "outcome": "passed", "keywords": ["test_evaluate_social_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00022555096074938774, "outcome": "passed"}, "call": {"duration": 0.0002163243480026722, "outcome": "passed"}, "teardown": {"duration": 0.00013456400483846664, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria", "lineno": 342, "outcome": "passed", "keywords": ["test_evaluate_governance_criteria", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021241698414087296, "outcome": "passed"}, "call": {"duration": 0.00020762812346220016, "outcome": "passed"}, "teardown": {"duration": 0.00013238796964287758, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments", "lineno": 384, "outcome": "passed", "keywords": ["test_performance_for_many_investments", "TestEthicalScreening", "test_screening.py", "test_ethical_screening", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002123480662703514, "outcome": "passed"}, "call": {"duration": 0.01757106278091669, "outcome": "passed", "stdout": "Screened 200 investments in 0.00 seconds\nScreened 200 investments in 0.02 seconds\nEstimated time for 1000 investments: 0.08 seconds\n"}, "teardown": {"duration": 0.00017056800425052643, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics", "lineno": 20, "outcome": "passed", "keywords": ["test_create_default_impact_metrics", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00031906086951494217, "outcome": "passed"}, "call": {"duration": 0.0001572389155626297, "outcome": "passed"}, "teardown": {"duration": 0.00010605202987790108, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine", "lineno": 35, "outcome": "passed", "keywords": ["test_initialize_engine", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010990118607878685, "outcome": "passed"}, "call": {"duration": 0.00015777815133333206, "outcome": "passed"}, "teardown": {"duration": 9.929202497005463e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact", "lineno": 48, "outcome": "passed", "keywords": ["test_measure_investment_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017642183229327202, "outcome": "passed"}, "call": {"duration": 0.00020375195890665054, "outcome": "passed"}, "teardown": {"duration": 0.000125229824334383, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data", "lineno": 89, "outcome": "passed", "keywords": ["test_measure_investment_impact_with_additional_data", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016907602548599243, "outcome": "passed"}, "call": {"duration": 0.00016545411199331284, "outcome": "passed"}, "teardown": {"duration": 0.00012163491919636726, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact", "lineno": 130, "outcome": "passed", "keywords": ["test_measure_portfolio_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00020752288401126862, "outcome": "passed"}, "call": {"duration": 0.0006649540737271309, "outcome": "passed"}, "teardown": {"duration": 0.00015260698273777962, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact", "lineno": 205, "outcome": "passed", "keywords": ["test_analyze_historical_impact", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.000250247772783041, "outcome": "passed"}, "call": {"duration": 0.0031759990379214287, "outcome": "passed"}, "teardown": {"duration": 0.00022526690736413002, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation", "lineno": 244, "outcome": "passed", "keywords": ["test_calculate_financial_impact_correlation", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002951766364276409, "outcome": "passed"}, "call": {"duration": 0.0043243118561804295, "outcome": "passed"}, "teardown": {"duration": 0.00016557984054088593, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric", "lineno": 285, "outcome": "passed", "keywords": ["test_normalize_metric", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001352657563984394, "outcome": "passed"}, "call": {"duration": 0.000154061708599329, "outcome": "passed"}, "teardown": {"duration": 0.00010666763409972191, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark", "lineno": 307, "outcome": "passed", "keywords": ["test_compare_to_benchmark", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010828999802470207, "outcome": "passed"}, "call": {"duration": 0.00014209793880581856, "outcome": "passed"}, "teardown": {"duration": 0.00010109972208738327, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data", "lineno": 332, "outcome": "passed", "keywords": ["test_performance_with_historical_data", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00024552224203944206, "outcome": "passed"}, "call": {"duration": 0.003260933794081211, "outcome": "passed", "stdout": "Analyzed 5 companies with 5+ years of data in 0.00 seconds\n"}, "teardown": {"duration": 0.00016797706484794617, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds", "lineno": 369, "outcome": "passed", "keywords": ["test_sustainable_investment_thresholds", "TestImpactMeasurement", "test_impact.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021346285939216614, "outcome": "passed"}, "call": {"duration": 0.0003274497576057911, "outcome": "passed"}, "teardown": {"duration": 0.00013702502474188805, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis", "lineno": 17, "outcome": "passed", "keywords": ["test_sdg_alignment_analysis", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002077752724289894, "outcome": "passed"}, "call": {"duration": 0.00018215226009488106, "outcome": "passed"}, "teardown": {"duration": 0.00012926384806632996, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar", "lineno": 75, "outcome": "passed", "keywords": ["test_impact_attribution_by_dollar", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00022009806707501411, "outcome": "passed"}, "call": {"duration": 0.00023130374029278755, "outcome": "passed"}, "teardown": {"duration": 0.00014341995120048523, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis", "lineno": 164, "outcome": "passed", "keywords": ["test_comparative_impact_analysis", "TestImpactAttribution", "test_impact_attribution.py", "test_impact_measurement", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002790577709674835, "outcome": "passed"}, "call": {"duration": 0.0002041282132267952, "outcome": "passed"}, "teardown": {"duration": 0.000140307005494833, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis", "lineno": 18, "outcome": "passed", "keywords": ["test_esg_theme_concentration_analysis", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00046072015538811684, "outcome": "passed"}, "call": {"duration": 0.0003321422263979912, "outcome": "passed"}, "teardown": {"duration": 0.00015668105334043503, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance", "lineno": 89, "outcome": "passed", "keywords": ["test_compare_portfolios_esg_performance", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021649524569511414, "outcome": "passed"}, "call": {"duration": 0.00019891513511538506, "outcome": "passed"}, "teardown": {"duration": 0.0001442236825823784, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance", "lineno": 188, "outcome": "passed", "keywords": ["test_risk_adjusted_esg_performance", "TestAdvancedPortfolioAnalysis", "test_advanced_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021265773102641106, "outcome": "passed"}, "call": {"duration": 0.00018678419291973114, "outcome": "passed"}, "teardown": {"duration": 0.00014927517622709274, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system", "lineno": 21, "outcome": "passed", "keywords": ["test_initialize_analysis_system", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00012392783537507057, "outcome": "passed"}, "call": {"duration": 0.00026095425710082054, "outcome": "passed"}, "teardown": {"duration": 0.0001126597635447979, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition", "lineno": 33, "outcome": "passed", "keywords": ["test_analyze_portfolio_composition", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021801423281431198, "outcome": "passed"}, "call": {"duration": 0.00029888469725847244, "outcome": "passed"}, "teardown": {"duration": 0.00015044678002595901, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening", "lineno": 96, "outcome": "passed", "keywords": ["test_analyze_portfolio_composition_with_screening", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002665589563548565, "outcome": "passed"}, "call": {"duration": 0.00028197234496474266, "outcome": "passed"}, "teardown": {"duration": 0.00014889705926179886, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification", "lineno": 175, "outcome": "passed", "keywords": ["test_assess_diversification", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00020966166630387306, "outcome": "passed"}, "call": {"duration": 0.00029808608815073967, "outcome": "passed"}, "teardown": {"duration": 0.00014071399345993996, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints", "lineno": 239, "outcome": "passed", "keywords": ["test_assess_diversification_with_constraints", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021923379972577095, "outcome": "passed"}, "call": {"duration": 0.00029820995405316353, "outcome": "passed"}, "teardown": {"duration": 0.0001371358521282673, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio", "lineno": 306, "outcome": "passed", "keywords": ["test_optimize_portfolio", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002419031225144863, "outcome": "passed"}, "call": {"duration": 0.0003078589215874672, "outcome": "passed"}, "teardown": {"duration": 0.00013980967923998833, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme", "lineno": 402, "outcome": "passed", "keywords": ["test_map_practice_to_theme", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010986439883708954, "outcome": "passed"}, "call": {"duration": 0.00014990614727139473, "outcome": "passed"}, "teardown": {"duration": 0.00010250462219119072, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints", "lineno": 417, "outcome": "passed", "keywords": ["test_sector_conflicts_with_constraints", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010972097516059875, "outcome": "passed"}, "call": {"duration": 0.000142581295222044, "outcome": "passed"}, "teardown": {"duration": 9.948108345270157e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit", "lineno": 436, "outcome": "passed", "keywords": ["test_calculate_diversification_benefit", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016795331612229347, "outcome": "passed"}, "call": {"duration": 0.00014409702271223068, "outcome": "passed"}, "teardown": {"duration": 0.00012852810323238373, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio", "lineno": 480, "outcome": "passed", "keywords": ["test_performance_with_large_portfolio", "TestPortfolioAnalysis", "test_analysis.py", "test_portfolio_analysis", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0002124076709151268, "outcome": "passed"}, "call": {"duration": 0.0018004169687628746, "outcome": "passed", "stdout": "Analyzed portfolio with 200 holdings in 0.00 seconds\n"}, "teardown": {"duration": 0.0001546391285955906, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker", "lineno": 19, "outcome": "passed", "keywords": ["test_initialize_tracker", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0003037001006305218, "outcome": "passed"}, "call": {"duration": 0.0001543080434203148, "outcome": "passed"}, "teardown": {"duration": 0.00010957196354866028, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions", "lineno": 41, "outcome": "passed", "keywords": ["test_analyze_company_voting_record_with_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018265563994646072, "outcome": "passed"}, "call": {"duration": 0.00019882665947079659, "outcome": "passed"}, "teardown": {"duration": 0.00012233294546604156, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions", "lineno": 84, "outcome": "passed", "keywords": ["test_analyze_company_voting_record_no_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018059927970170975, "outcome": "passed"}, "call": {"duration": 0.00015942007303237915, "outcome": "passed"}, "teardown": {"duration": 0.00012043118476867676, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns", "lineno": 123, "outcome": "passed", "keywords": ["test_analyze_issue_voting_patterns", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001743449829518795, "outcome": "passed"}, "call": {"duration": 0.0001862458884716034, "outcome": "passed"}, "teardown": {"duration": 0.00012180395424365997, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions", "lineno": 162, "outcome": "passed", "keywords": ["test_analyze_issue_voting_patterns_no_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016669277101755142, "outcome": "passed"}, "call": {"duration": 0.00015756720677018166, "outcome": "passed"}, "teardown": {"duration": 0.00011623604223132133, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations", "lineno": 200, "outcome": "passed", "keywords": ["test_generate_voting_recommendations", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016119889914989471, "outcome": "passed"}, "call": {"duration": 0.00022032484412193298, "outcome": "passed"}, "teardown": {"duration": 0.0001278039999306202, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities", "lineno": 268, "outcome": "passed", "keywords": ["test_identify_engagement_opportunities", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00021564634516835213, "outcome": "passed"}, "call": {"duration": 0.00019789999350905418, "outcome": "passed"}, "teardown": {"duration": 0.00013476982712745667, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment", "lineno": 331, "outcome": "passed", "keywords": ["test_calculate_value_alignment", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016326922923326492, "outcome": "passed"}, "call": {"duration": 0.0001385211944580078, "outcome": "passed"}, "teardown": {"duration": 0.00012260768562555313, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions", "lineno": 381, "outcome": "passed", "keywords": ["test_find_similar_resolutions", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001645190641283989, "outcome": "passed"}, "call": {"duration": 0.00014872895553708076, "outcome": "passed"}, "teardown": {"duration": 0.0001254882663488388, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends", "lineno": 423, "outcome": "passed", "keywords": ["test_analyze_trends", "TestShareholderAdvocacy", "test_advocacy.py", "test_shareholder_advocacy", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016376515850424767, "outcome": "passed"}, "call": {"duration": 0.00017900578677654266, "outcome": "passed"}, "teardown": {"duration": 0.00012128893285989761, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories", "lineno": 21, "outcome": "passed", "keywords": ["test_create_default_value_categories", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00029831286519765854, "outcome": "passed"}, "call": {"duration": 0.00018450617790222168, "outcome": "passed"}, "teardown": {"duration": 0.00011646095663309097, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system", "lineno": 42, "outcome": "passed", "keywords": ["test_initialize_budgeting_system", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010837893933057785, "outcome": "passed"}, "call": {"duration": 0.00017370982095599174, "outcome": "passed"}, "teardown": {"duration": 9.932788088917732e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags", "lineno": 56, "outcome": "passed", "keywords": ["test_categorize_transaction_with_tags", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017833290621638298, "outcome": "passed"}, "call": {"duration": 0.00019538495689630508, "outcome": "passed"}, "teardown": {"duration": 0.00012112874537706375, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags", "lineno": 99, "outcome": "passed", "keywords": ["test_categorize_transaction_without_tags", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016888463869690895, "outcome": "passed"}, "call": {"duration": 0.00022551603615283966, "outcome": "passed"}, "teardown": {"duration": 0.00012017274275422096, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions", "lineno": 132, "outcome": "passed", "keywords": ["test_batch_categorize_transactions", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00017567817121744156, "outcome": "passed"}, "call": {"duration": 0.00031358422711491585, "outcome": "passed", "stdout": "Categorized 7 transactions in 0.00 seconds\n"}, "teardown": {"duration": 0.00013083871454000473, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns", "lineno": 163, "outcome": "passed", "keywords": ["test_analyze_spending_patterns", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001803189516067505, "outcome": "passed"}, "call": {"duration": 0.0003915787674486637, "outcome": "passed", "stdout": "Categorized 7 transactions in 0.00 seconds\n"}, "teardown": {"duration": 0.0001248554326593876, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter", "lineno": 209, "outcome": "passed", "keywords": ["test_analyze_spending_patterns_with_date_filter", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016953889280557632, "outcome": "passed"}, "call": {"duration": 0.00046631693840026855, "outcome": "passed", "stdout": "Categorized 5 transactions in 0.00 seconds\nCategorized 7 transactions in 0.00 seconds\n"}, "teardown": {"duration": 0.00013440707698464394, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors", "lineno": 248, "outcome": "passed", "keywords": ["test_suggest_alternative_vendors", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010969489812850952, "outcome": "passed"}, "call": {"duration": 0.00017394591122865677, "outcome": "passed"}, "teardown": {"duration": 0.0001011374406516552, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction", "lineno": 280, "outcome": "passed", "keywords": ["test_suggest_categories_from_transaction", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.0001715472899377346, "outcome": "passed"}, "call": {"duration": 0.0002005910500884056, "outcome": "passed"}, "teardown": {"duration": 0.00013188086450099945, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment", "lineno": 309, "outcome": "passed", "keywords": ["test_find_categories_by_alignment", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00010938802734017372, "outcome": "passed"}, "call": {"duration": 0.00016523385420441628, "outcome": "passed"}, "teardown": {"duration": 9.685195982456207e-05, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions", "lineno": 336, "outcome": "passed", "keywords": ["test_performance_categorizing_many_transactions", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00016963016241788864, "outcome": "passed"}, "call": {"duration": 0.014962328132241964, "outcome": "passed", "stdout": "Categorized 1000 transactions in 0.01 seconds\nCategorized 1000 transactions in 0.01 seconds\nRate: 76787.81 transactions per second\n"}, "teardown": {"duration": 0.00013875076547265053, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values", "lineno": 382, "outcome": "passed", "keywords": ["test_categorize_transaction_with_conflicting_values", "TestValuesBudgeting", "test_budgeting.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00011526979506015778, "outcome": "passed"}, "call": {"duration": 0.00019444432109594345, "outcome": "passed"}, "teardown": {"duration": 0.00010839290916919708, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories", "lineno": 20, "outcome": "passed", "keywords": ["test_values_consistency_across_spending_categories", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018617883324623108, "outcome": "passed"}, "call": {"duration": 0.0004924451932311058, "outcome": "passed", "stdout": "Categorized 2 transactions in 0.00 seconds\nCategorized 1 transactions in 0.00 seconds\nCategorized 1 transactions in 0.00 seconds\nCategorized 1 transactions in 0.00 seconds\nCategorized 1 transactions in 0.00 seconds\nCategorized 1 transactions in 0.00 seconds\n"}, "teardown": {"duration": 0.0001409389078617096, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time", "lineno": 74, "outcome": "passed", "keywords": ["test_values_drift_over_time", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00020369701087474823, "outcome": "passed"}, "call": {"duration": 0.00034179631620645523, "outcome": "passed"}, "teardown": {"duration": 0.00012712925672531128, "outcome": "passed"}}, {"nodeid": "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis", "lineno": 163, "outcome": "passed", "keywords": ["test_vendor_value_profile_analysis", "TestPersonalValuesAlignment", "test_personal_values_alignment.py", "test_values_budgeting", "socially_responsible_investor", "tests", "unified", ""], "setup": {"duration": 0.00018216809257864952, "outcome": "passed"}, "call": {"duration": 0.001085801050066948, "outcome": "passed", "stdout": "Categorized 11 transactions in 0.00 seconds\nCategorized 9 transactions in 0.00 seconds\nCategorized 13 transactions in 0.00 seconds\n"}, "teardown": {"duration": 0.0001660599373281002, "outcome": "passed"}}], "warnings": [{"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/models/common.py", "lineno": 270}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 36}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 43}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 50}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 57}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/income/models.py", "lineno": 64}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/project/models.py", "lineno": 51}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 40}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/projection/models.py", "lineno": 99}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 50}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 77}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/tax/models.py", "lineno": 124}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 39}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 102}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 123}, {"message": "Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/", "category": "PydanticDeprecatedSince20", "when": "collect", "filename": "/home/justinchiu_cohere_com/minicode/large_repos/personal_finance_tracker/unified/personal_finance_tracker/expense/models.py", "lineno": 130}]}