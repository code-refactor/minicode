[
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_categorization_rule",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_add_mixed_use_item",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_apply_categorization",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transaction",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_categorize_transactions",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_correct_categorization",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_generate_expense_summary",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_get_audit_trail",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_init",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_remove_categorization_rule",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_rule_matching",
  "tests/freelancer/expense/test_categorizer.py::TestExpenseCategorizer::test_update_categorization_rule",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_calculate_monthly_income",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_extremely_irregular_income",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_forecast_revenue",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_income_smoothing_with_large_dataset",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_init",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_exponential_smoothing",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_moving_average",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_percentile_based",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_rolling_median",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_seasonal_adjustment",
  "tests/freelancer/income/test_income_manager.py::TestIncomeManager::test_smooth_income_with_target",
  "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_delayed_categorization_errors",
  "tests/freelancer/integration/test_categorization_recovery.py::TestCategorizationRecovery::test_recover_from_multiple_categorization_errors",
  "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_delayed_categorization_errors",
  "tests/freelancer/integration/test_categorization_recovery_mocks.py::TestCategorizationRecoveryMocks::test_recover_from_multiple_categorization_errors",
  "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_delayed_categorization_errors",
  "tests/freelancer/integration/test_categorization_recovery_simplified.py::TestCategorizationRecoverySimplified::test_recover_from_multiple_categorization_errors",
  "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_business_expenses_impact_on_tax_liability",
  "tests/freelancer/integration/test_expense_tax_integration.py::TestExpenseTaxIntegration::test_expense_recategorization_tax_impact",
  "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_categorization_correction_tax_impact",
  "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_expense_categorization_impacts_tax_liability",
  "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_multi_year_project_profitability",
  "tests/freelancer/integration/test_integration_mocks.py::TestIntegrationWithMocks::test_quarterly_tax_estimation",
  "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_cross_year_project_cash_flow",
  "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_profitability_across_tax_years",
  "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_project_spanning_three_tax_years",
  "tests/freelancer/integration/test_multi_year_projects.py::TestMultiYearProjects::test_tax_implications_of_cross_year_project",
  "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_comprehensive_quarterly_tax_preparation",
  "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_income_smoothing",
  "tests/freelancer/integration/test_quarterly_tax_mocks.py::TestQuarterlyTaxPreparationMocks::test_quarterly_tax_with_prior_payments",
  "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_comprehensive_quarterly_tax_preparation",
  "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_income_smoothing",
  "tests/freelancer/integration/test_quarterly_tax_preparation.py::TestQuarterlyTaxPreparation::test_quarterly_tax_with_prior_payments",
  "tests/freelancer/integration/test_quarterly_tax_preparation_mock.py::TestQuarterlyTaxPreparationMock::test_comprehensive_quarterly_tax_preparation",
  "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_comprehensive_quarterly_tax_preparation",
  "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_income_smoothing",
  "tests/freelancer/integration/test_quarterly_tax_preparation_simplified.py::TestQuarterlyTaxPreparationSimplified::test_quarterly_tax_with_prior_payments",
  "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_expense_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_income_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_project_profitability_across_years",
  "tests/freelancer/integration/test_year_over_year_comparison.py::TestYearOverYearComparison::test_tax_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_expense_category_trends",
  "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_income_growth_analysis",
  "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_project_profitability_trends",
  "tests/freelancer/integration/test_year_over_year_mocks.py::TestYearOverYearComparison::test_tax_liability_comparison",
  "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_expense_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_income_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_project_profitability_across_years",
  "tests/freelancer/integration/test_year_over_year_simple.py::TestYearOverYearSimple::test_tax_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_expense_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_income_comparison_across_years",
  "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_project_profitability_across_years",
  "tests/freelancer/integration/test_year_over_year_simplified.py::TestYearOverYearSimplified::test_tax_comparison_across_years",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_allocate_expense",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_all_projects",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_client_profitability",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_large_project_set",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_analyze_project_profitability",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_generate_trend_analysis",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_init",
  "tests/freelancer/project/test_profitability_analyzer.py::TestProjectProfiler::test_record_time_entry",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_assess_emergency_fund_simple",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_calculate_runway_simple",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_create_what_if_scenario_with_evaluation",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_init",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_negative_cash_flow",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow",
  "tests/freelancer/projection/test_financial_projector.py::TestFinancialProjector::test_project_cash_flow_different_scenarios",
  "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_calculate_tax_quarters",
  "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_get_current_quarter",
  "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_init",
  "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_load_default_brackets",
  "tests/freelancer/tax/test_tax_manager_simple.py::TestTaxManagerSimple::test_tax_brackets",
  "tests/freelancer/test_main.py::test_main",
  "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_create_prioritized_ethical_criteria",
  "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_criteria_from_user_survey",
  "tests/socially_responsible_investor/test_ethical_screening/test_ethical_criteria_customization.py::TestEthicalCriteriaCustomization::test_serialize_and_load_criteria",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_create_default_criteria",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_environmental_criteria",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_governance_criteria",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_evaluate_social_criteria",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_initialize_screener",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_performance_for_many_investments",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_failing",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_passing",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_exclusions",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investment_with_inclusions",
  "tests/socially_responsible_investor/test_ethical_screening/test_screening.py::TestEthicalScreening::test_screen_investments_batch",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_analyze_historical_impact",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_calculate_financial_impact_correlation",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_compare_to_benchmark",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_create_default_impact_metrics",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_initialize_engine",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_investment_impact_with_additional_data",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_measure_portfolio_impact",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_normalize_metric",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_performance_with_historical_data",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact.py::TestImpactMeasurement::test_sustainable_investment_thresholds",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_comparative_impact_analysis",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_impact_attribution_by_dollar",
  "tests/socially_responsible_investor/test_impact_measurement/test_impact_attribution.py::TestImpactAttribution::test_sdg_alignment_analysis",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_compare_portfolios_esg_performance",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_esg_theme_concentration_analysis",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_advanced_analysis.py::TestAdvancedPortfolioAnalysis::test_risk_adjusted_esg_performance",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_analyze_portfolio_composition_with_screening",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_assess_diversification_with_constraints",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_calculate_diversification_benefit",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_initialize_analysis_system",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_map_practice_to_theme",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_optimize_portfolio",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_performance_with_large_portfolio",
  "tests/socially_responsible_investor/test_portfolio_analysis/test_analysis.py::TestPortfolioAnalysis::test_sector_conflicts_with_constraints",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_no_resolutions",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_company_voting_record_with_resolutions",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_issue_voting_patterns_no_resolutions",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_analyze_trends",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_calculate_value_alignment",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_find_similar_resolutions",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_generate_voting_recommendations",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_identify_engagement_opportunities",
  "tests/socially_responsible_investor/test_shareholder_advocacy/test_advocacy.py::TestShareholderAdvocacy::test_initialize_tracker",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_analyze_spending_patterns_with_date_filter",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_batch_categorize_transactions",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_conflicting_values",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_with_tags",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_categorize_transaction_without_tags",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_create_default_value_categories",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_find_categories_by_alignment",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_initialize_budgeting_system",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_performance_categorizing_many_transactions",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_alternative_vendors",
  "tests/socially_responsible_investor/test_values_budgeting/test_budgeting.py::TestValuesBudgeting::test_suggest_categories_from_transaction",
  "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_consistency_across_spending_categories",
  "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_values_drift_over_time",
  "tests/socially_responsible_investor/test_values_budgeting/test_personal_values_alignment.py::TestPersonalValuesAlignment::test_vendor_value_profile_analysis"
]